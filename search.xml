<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>welcome to my blog</title>
    <url>/2020/10/24/welcome-to-my-blog/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>&#x521D;&#xB7;&#x89C1;</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<p>&#x200B;	&#x54C8;&#x55BD;&#xFF0C;&#x5927;&#x5BB6;&#x597D;&#xFF0C;&#x6211;&#x662F;cozy&#x3002;&#x6B22;&#x8FCE;&#x5927;&#x5BB6;&#x8BBF;&#x95EE;&#x6211;&#x7684;&#x4E2A;&#x4EBA;&#x4E3B;&#x9875;&#x3002;&#x4E00;&#x76F4;&#x4EE5;&#x6765;&#x90FD;&#x5F88;&#x60F3;&#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;&#x7F51;&#x9875;&#xFF0C;&#x4ECA;&#x5929;&#x7EC8;&#x4E8E;&#x5B9E;&#x73B0;&#x4E86;&#xFF0C;&#x5F88;&#x5F00;&#x5FC3;&#x53EF;&#x4EE5;&#x5728;1024&#x4E0E;&#x5927;&#x5BB6;&#x89C1;&#x9762;&#x3002;&#x867D;&#x7136;&#x73B0;&#x5728;&#x6709;&#x70B9;&#x7A7A;&#x8361;&#x8361;&#x7684;&#xFF0C;&#x4F46;&#x6211;&#x4F1A;&#x597D;&#x597D;&#x52AA;&#x529B;&#xFF0C;&#x5206;&#x4EAB;&#x4E00;&#x4E9B;&#x6709;<s>&#x4EF7;&#x503C;</s>&#xFF08;&#x6C99;&#x96D5;&#xFF09;&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x5E0C;&#x671B;&#x5927;&#x5BB6;&#x4EE5;&#x540E;&#x6709;&#x7A7A;&#x6CA1;&#x7A7A;&#x5E38;&#x6765;&#x770B;&#x770B;&#x3001;&#x50AC;&#x66F4;&#xFF0C;&#x6216;&#x8005;&#x53EA;&#x662F;&#x5355;&#x7EAF;&#x60F3;&#x548C;&#x6211;&#x804A;&#x5929;&#xFF0C;&#x53EF;&#x4EE5;&#x53BB;&#x7559;&#x8A00;&#x677F;&#xFF0C;&#x5E94;&#x8BE5;&#x662F;&#x5B8C;&#x5168;&#x533F;&#x540D;&#x7684;&#x5427;&#xFF0C;&#x4E0D;&#x8FC7;&#x8FD9;&#x6BD5;&#x7ADF;&#x662F;&#x4E2A;&#x7F51;&#x7AD9;&#x4E0D;&#x662F;&#x670B;&#x53CB;&#x5708;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#x9690;&#x79C1;&#x54E6;&#x3002;&#x7559;&#x8A00;&#x677F;&#x4E0B;&#x65B9;&#x662F;<span class="label success">cozy&#x8BF4;</span>&#xFF0C;&#x90A3;&#x662F;&#x4E00;&#x4E2A;&#x6211;&#x5206;&#x4EAB;&#x52A8;&#x6001;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x76EE;&#x524D;&#x5927;&#x5BB6;&#x53EA;&#x6709;&#x8BFB;&#x7684;&#x6743;&#x9650;&#x2026;</p>
<p>&#x200B;	&#x5728;&#x6211;&#x76EE;&#x524D;&#x7684;&#x5B9A;&#x4F4D;&#x4E2D;&#xFF0C;&#x672A;&#x6765;&#x8BE5;&#x7F51;&#x7AD9;&#x4E0D;&#x4EC5;&#x4EC5;&#x53EA;&#x6709;&#x6280;&#x672F;&#x7C7B;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x5F53;&#x7136;&#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x5927;&#x90E8;&#x5206;&#x5566;&#xFF0C;&#x6211;&#x8FD8;&#x60F3;&#x7528;&#x6765;&#x8BB0;&#x5F55;&#x5E73;&#x65E5;&#x7684;&#x751F;&#x6D3B;&#xFF0C;&#x5199;&#x4E00;&#x5199;&#x603B;&#x7ED3;&#x4E4B;&#x7C7B;&#x7684;&#x3002;&#x6B63;&#x5982;&#x535A;&#x5BA2;&#x540D;<span class="label info">cozy</span>&#xFF0C;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x6709;&#x6E29;&#x5EA6;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x51B7;&#x51B0;&#x51B0;&#x7684;&#x6280;&#x672F;&#xFF0C;<s>&#x4E00;&#x6253;&#x5C31;&#x62A5;&#x9519;</s>&#x7684;&#x4EE3;&#x7801;&#x3002;&#x5982;&#x679C;&#x60A8;&#x89C9;&#x5F97;&#x67D0;&#x7BC7;&#x6587;&#x7AE0;&#x6709;&#x610F;&#x601D;&#xFF0C;&#x53EF;&#x4EE5;<s>&#x4E00;&#x952E;&#x4E09;&#x8FDE;&#x2013;&#x8F6C;&#x53D1;&#xFF0C;&#x6295;&#x5E01;&#xFF0C;&#x70B9;&#x8D5E;</s>&#xFF08;&#x597D;&#x5427;&#xFF0C;&#x8FD9;&#x4E9B;&#x529F;&#x80FD;&#x90FD;&#x6CA1;&#x6709;&#x5B9E;&#x73B0;&#xFF09;&#x5728;&#x8BC4;&#x8BBA;&#x533A;&#x7559;&#x8A00;&#x54E6;&#xFF01;</p>
<p>&#x200B;	&#x8FD9;&#x4E2A;&#x7F51;&#x9875;&#x65AD;&#x65AD;&#x7EED;&#x7EED;&#x642D;&#x5EFA;&#x4E86;&#x4FE9;&#x5468;&#xFF0C;&#x4F46;&#x4E00;&#x76F4;&#x5728;&#x7535;&#x8111;&#x4E0A;&#x8C03;&#x8BD5;&#xFF0C;&#x6CA1;&#x6709;&#x592A;&#x6CE8;&#x610F;&#x5230;&#x624B;&#x673A;&#x7AEF;&#x7684;&#x89C6;&#x89C9;&#x4F53;&#x9A8C;&#xFF0C;&#x800C;&#x4E14;&#x53EF;&#x80FD;&#x4F1A;&#x6BD4;&#x8F83;&#x6162;&#xFF0C;&#x62B1;&#x6B49;&#xFF08;&#x3002;pc&#x7AEF;&#x548C;&#x624B;&#x673A;&#x7AEF;&#x53EF;&#x80FD;&#x770B;&#x5230;&#x7684;&#x5206;&#x5E03;&#x4E0D;&#x592A;&#x4E00;&#x6837;&#xFF0C;pc&#x7AEF;&#x7684;&#x529F;&#x80FD;&#x8DF3;&#x8F6C;&#x952E;&#x5728;&#x5DE6;&#x4FA7;&#xFF0C;&#x624B;&#x673A;&#x7AEF;&#x7684;&#x5728;&#x4E0A;&#x65B9;&#xFF0C;&#x6211;&#x81EA;&#x5DF1;&#x89C9;&#x5F97;pc&#x7AEF;&#x66F4;&#x597D;&#x770B;&#x4E00;&#x4E9B;&#x54C8;&#x54C8;&#x3002;</p>
<p>&#x200B;				&#x518D;&#x6B21;&#x611F;&#x8C22;&#x5927;&#x5BB6;&#x7684;&#x9605;&#x8BFB;&#xFF0C;&#x87F9;&#x87F9;&#xFF01;</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>&#x8BF7;&#x591A;&#x591A;&#x5173;&#x7167;</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>]]></content>
  </entry>
  <entry>
    <title>Atrick</title>
    <url>/2020/11/02/Atrick/</url>
    <content><![CDATA[<p>&#x5F85;&#x586B;&#x5751;&#x2026;</p>
]]></content>
  </entry>
  <entry>
    <title>57. 插入区间</title>
    <url>/2020/11/04/57-%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/</url>
    <content><![CDATA[<h4 id="57-Insert-Interval"><a href="https://leetcode-cn.com/problems/insert-interval/">57. Insert Interval</a></h4>
<a id="more"></a>
<p>&#x96BE;&#x5EA6;&#x56F0;&#x96BE;246</p>
<p>Given a set of <em>non-overlapping</em> intervals, insert a new interval into the intervals (merge if necessary).</p>
<p>You may assume that the intervals were initially sorted according to their start times.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,3],[6,9]], newInterval = [2,5]</span><br><span class="line">Output: [[1,5],[6,9]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]</span><br><span class="line">Output: [[1,2],[3,10],[12,16]]</span><br><span class="line">Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals = [], newInterval = [5,7]</span><br><span class="line">Output: [[5,7]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,5]], newInterval = [2,3]</span><br><span class="line">Output: [[1,5]]</span><br></pre></td></tr></table></figure>
<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: intervals = [[1,5]], newInterval = [2,7]</span><br><span class="line">Output: [[1,7]]</span><br></pre></td></tr></table></figure>
<p><font color="red">solution </font></p>
<p>a&#x4E86;&#x4E00;&#x9053;hard&#x9898;&#xFF0C;&#x5F88;&#x8212;&#x670D;&#xFF0C;&#x611F;&#x89C9;&#x4E0D;&#x662F;&#x5F88;&#x96BE;</p>
<ol>
<li>
<p>&#x7B2C;&#x4E00;&#x6B65;&#x5148;&#x628A;<code>newInterval</code>&#x63D2;&#x5165;&#x5230;<code>intervals</code>&#x4E2D;&#xFF0C;&#x518D;&#x6309;&#x6BCF;&#x4E2A;&#x95F4;&#x9694;&#x7684;&#x8D77;&#x59CB;&#x70B9;&#x6709;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;</p>
</li>
<li>
<p>&#x7136;&#x540E;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x878D;&#x5408;&#x591A;&#x4E2A;&#x533A;&#x95F4;&#xFF0C;&#x9700;&#x8981;&#x7528;&#x4E2A;<code>imax</code>&#x4FDD;&#x5B58;&#x8FD9;&#x51E0;&#x4E2A;&#x533A;&#x95F4;&#x4E2D;&#x6700;&#x5927;&#x7684;&#x7EC8;&#x70B9;</p>
<p>&#x4F8B;&#x5982; <code>[1,4] [3,10] [5,8]</code> &#x90A3;&#x4E48;imax=10</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">insert</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; intervals, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; newInterval)</span> </span>{</span><br><span class="line"></span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;tmp;</span><br><span class="line">            intervals.push_back(newInterval);</span><br><span class="line">            sort(intervals.begin(),intervals.end(),cmp);</span><br><span class="line">            <span class="keyword">bool</span> lastpush=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;intervals.size()<span class="number">-1</span>;++i)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">int</span> a=i;</span><br><span class="line">                <span class="keyword">int</span> imax=intervals[i][<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">while</span>(i&lt;intervals.size()<span class="number">-1</span>&amp;&amp;imax&gt;=intervals[i+<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">                {</span><br><span class="line">                    i++;</span><br><span class="line">                    imax=max(imax,intervals[i][<span class="number">1</span>]);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span>(i==intervals.size()<span class="number">-1</span>)lastpush=<span class="literal">true</span>;</span><br><span class="line">                tmp.push_back({intervals[a][<span class="number">0</span>],imax});</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(lastpush==<span class="literal">false</span>)tmp.push_back(intervals[intervals.size()<span class="number">-1</span>]);</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;b)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">0</span>]&lt;b[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷-P1094 Souvenir Section</title>
    <url>/2020/11/03/%E6%B4%9B%E8%B0%B7-P1094-Souvenir-Section/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1094">P1094 &#x7EAA;&#x5FF5;&#x54C1;&#x5206;&#x7EC4;</a></p>
<a id="more"></a>
<h2 id="description">description</h2>
<p>&#x5143;&#x65E6;&#x5FEB;&#x5230;&#x4E86;&#xFF0C;&#x6821;&#x5B66;&#x751F;&#x4F1A;&#x8BA9;&#x4E50;&#x4E50;&#x8D1F;&#x8D23;&#x65B0;&#x5E74;&#x665A;&#x4F1A;&#x7684;&#x7EAA;&#x5FF5;&#x54C1;&#x53D1;&#x653E;&#x5DE5;&#x4F5C;&#x3002;&#x4E3A;&#x4F7F;&#x5F97;&#x53C2;&#x52A0;&#x665A;&#x4F1A;&#x7684;&#x540C;&#x5B66;&#x6240;&#x83B7;&#x5F97; &#x7684;&#x7EAA;&#x5FF5;&#x54C1;&#x4EF7;&#x503C;&#x76F8;&#x5BF9;&#x5747;&#x8861;&#xFF0C;&#x4ED6;&#x8981;&#x628A;&#x8D2D;&#x6765;&#x7684;&#x7EAA;&#x5FF5;&#x54C1;&#x6839;&#x636E;&#x4EF7;&#x683C;&#x8FDB;&#x884C;&#x5206;&#x7EC4;&#xFF0C;&#x4F46;&#x6BCF;&#x7EC4;&#x6700;&#x591A;&#x53EA;&#x80FD;&#x5305;&#x62EC;&#x4E24;&#x4EF6;&#x7EAA;&#x5FF5;&#x54C1;&#xFF0C; &#x5E76;&#x4E14;&#x6BCF;&#x7EC4;&#x7EAA;&#x5FF5;&#x54C1;&#x7684;&#x4EF7;&#x683C;&#x4E4B;&#x548C;&#x4E0D;&#x80FD;&#x8D85;&#x8FC7;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x6574;&#x6570;&#x3002;&#x4E3A;&#x4E86;&#x4FDD;&#x8BC1;&#x5728;&#x5C3D;&#x91CF;&#x77ED;&#x7684;&#x65F6;&#x95F4;&#x5185;&#x53D1;&#x5B8C;&#x6240;&#x6709;&#x7EAA;&#x5FF5;&#x54C1;&#xFF0C;&#x4E50;&#x4E50;&#x5E0C;&#x671B;&#x5206;&#x7EC4;&#x7684;&#x6570;&#x76EE;&#x6700;&#x5C11;&#x3002;</p>
<p>&#x4F60;&#x7684;&#x4EFB;&#x52A1;&#x662F;&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#xFF0C;&#x627E;&#x51FA;&#x6240;&#x6709;&#x5206;&#x7EC4;&#x65B9;&#x6848;&#x4E2D;&#x5206;&#x7EC4;&#x6570;&#x6700;&#x5C11;&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x8F93;&#x51FA;&#x6700;&#x5C11;&#x7684;&#x5206;&#x7EC4;&#x6570;&#x76EE;&#x3002;</p>
<h2 id="input">input</h2>
<p>&#x5171; n*+2 &#x884C;&#xFF1A;</p>
<p>&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6574;&#x6570; <em>w</em>&#xFF0C;&#x4E3A;&#x6BCF;&#x7EC4;&#x7EAA;&#x5FF5;&#x54C1;&#x4EF7;&#x683C;&#x4E4B;&#x548C;&#x7684;&#x4E0A;&#x9650;&#x3002;</p>
<p>&#x7B2C;&#x4E8C;&#x884C;&#x4E3A;&#x4E00;&#x4E2A;&#x6574;&#x6570; <em>n</em>&#xFF0C;&#x8868;&#x793A;&#x8D2D;&#x6765;&#x7684;&#x7EAA;&#x5FF5;&#x54C1;&#x7684;&#x603B;&#x4EF6;&#x6570; <em>G</em>&#x3002;</p>
<p>&#x7B2C; 3&#x223C;<em>n</em>+2 &#x884C;&#x6BCF;&#x884C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570; P_i &#x8868;&#x793A;&#x6240;&#x5BF9;&#x5E94;&#x7EAA;&#x5FF5;&#x54C1;&#x7684;&#x4EF7;&#x683C;&#x3002;</p>
<h2 id="output">output</h2>
<p>&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5373;&#x6700;&#x5C11;&#x7684;&#x5206;&#x7EC4;&#x6570;&#x76EE;&#x3002;</p>
<h2 id="sample">sample</h2>
<p><strong>&#x8F93;&#x5165; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100 </span><br><span class="line">9 </span><br><span class="line">90 </span><br><span class="line">20 </span><br><span class="line">20 </span><br><span class="line">30 </span><br><span class="line">50 </span><br><span class="line">60 </span><br><span class="line">70 </span><br><span class="line">80 </span><br><span class="line">90</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>
<h2 id="hint">hint</h2>
<p>50% &#x7684;&#x6570;&#x636E;&#x6EE1;&#x8DB3;&#xFF1A;1&#x2264;<em>n</em>&#x2264;15&#x3002;</p>
<p>100% &#x7684;&#x6570;&#x636E;&#x6EE1;&#x8DB3;&#xFF1A;1&#x2264;<em>n</em>&#x2264;3&#xD7;104&#xFF0C;80&#x2264;<em>w</em>&#x2264;200&#xFF0C;5&#x2264;<em>P**i</em>&#x2264;<em>w</em>&#x3002;</p>
<h3 id="solution">solution</h3>
<p>&#x8D2A;&#x5FC3;&#xFF0C;&#x800C;&#x4E14;&#x9700;&#x8981;&#x526A;&#x679D;&#xFF0C;&#x4E0D;&#x7136;&#x4F1A;&#x8D85;&#x65F6;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt; pa;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">205</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;limit&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">	{</span><br><span class="line">		<span class="comment">/* code */</span></span><br><span class="line">		<span class="keyword">int</span> tmp;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tmp);</span><br><span class="line">		v.push_back(tmp);</span><br><span class="line">		cnt[tmp]++;</span><br><span class="line">	}</span><br><span class="line">	sort(v.begin(),v.end(),greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size()<span class="number">-1</span>;++i)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;v.size();j++)</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">if</span>(cnt[v[i]]==<span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//&#x526A;&#x679D;</span></span><br><span class="line">			<span class="keyword">if</span>(cnt[v[j]]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(v[i]+v[j]&lt;=limit&amp;&amp;((v[i]!=v[j])||(v[i]==v[j]&amp;&amp;cnt[v[j]]&gt;<span class="number">1</span>)))<span class="comment">//&#x53EF;&#x4EE5;&#x5408;&#x6210;&#x4E00;&#x5BF9;</span></span><br><span class="line">			{</span><br><span class="line">				n--;<span class="comment">//&#x5BF9;&#x6570;&#x51CF;&#x4E00;</span></span><br><span class="line">				cnt[v[i]]--;</span><br><span class="line">				cnt[v[j]]--;</span><br><span class="line">				</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>941. Valid Mountain Array</title>
    <url>/2020/11/03/941-Valid-Mountain-Array/</url>
    <content><![CDATA[<h4 id="941-Valid-Mountain-Array"><a href="https://leetcode-cn.com/problems/valid-mountain-array/">941. Valid Mountain Array</a></h4>
<a id="more"></a>
<p>&#x96BE;&#x5EA6;&#x7B80;&#x5355;79</p>
<p>Given an array <code>A</code> of integers, return <code>true</code> if and only if it is a <em>valid mountain array</em>.</p>
<p>Recall that A is a mountain array if and only if:</p>
<ul>
<li>
<p><code>A.length &gt;= 3</code></p>
</li>
<li>
<p>There exists some</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure>
<p>with</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 &lt; i &lt; A.length - 1</span><br></pre></td></tr></table></figure>
<p>such that:</p>
<ul>
<li><code>A[0] &lt; A[1] &lt; ... A[i-1] &lt; A[i]</code></li>
<li><code>A[i] &gt; A[i+1] &gt; ... &gt; A[A.length - 1]</code></li>
</ul>
</li>
</ul>
<p><img src="https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png" alt="img"></p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [2,1]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [3,5,5]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: [0,3,2,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong></p>
<ol>
<li><code>0 &lt;= A.length &lt;= 10000</code></li>
<li><code>0 &lt;= A[i] &lt;= 10000 </code></li>
</ol>
<p><font color="red">solution</font></p>
<p>&#x6C34;&#x9898;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validMountainArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(A.size()&lt;<span class="number">3</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> imax=INT_MIN,index=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();++i)</span><br><span class="line">            <span class="keyword">if</span>(imax&lt;A[i])</span><br><span class="line">            {</span><br><span class="line">                imax=A[i];</span><br><span class="line">                index=i;</span><br><span class="line">            }</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>||index==A.size()<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;++i)</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;=A[i+<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=A.size()<span class="number">-1</span>;i&gt;index;i--)</span><br><span class="line">            <span class="keyword">if</span>(A[i]&gt;=A[i<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>PYTHON-CHAPTER 3</title>
    <url>/2020/11/02/CHAPTER-3/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>5600. Kth Smallest Instructions</title>
    <url>/2020/11/02/5600-Kth-Smallest-Instructions/</url>
    <content><![CDATA[<h4 id="5600-Kth-Smallest-Instructions"><a href="https://leetcode-cn.com/problems/kth-smallest-instructions/">5600. Kth Smallest Instructions</a></h4>
<a id="more"></a>
<p>&#x96BE;&#x5EA6;&#x56F0;&#x96BE;14</p>
<p>Bob is standing at cell <code>(0, 0)</code>, and he wants to reach <code>destination</code>: <code>(row, column)</code>. He can only travel <strong>right</strong> and <strong>down</strong>. You are going to help Bob by providing <strong>instructions</strong> for him to reach <code>destination</code>.</p>
<p>The <strong>instructions</strong> are represented as a string, where each character is either:</p>
<ul>
<li><code>&apos;H&apos;</code>, meaning move horizontally (go <strong>right</strong>), or</li>
<li><code>&apos;V&apos;</code>, meaning move vertically (go <strong>down</strong>).</li>
</ul>
<p>Multiple <strong>instructions</strong> will lead Bob to <code>destination</code>. For example, if <code>destination</code> is <code>(2, 3)</code>, both <code>&quot;HHHVV&quot;</code> and <code>&quot;HVHVH&quot;</code> are valid <strong>instructions</strong>.</p>
<p>However, Bob is very picky. Bob has a lucky number <code>k</code>, and he wants the <code>kth</code> <strong>lexicographically smallest instructions</strong> that will lead him to <code>destination</code>. <code>k</code> is <strong>1-indexed</strong>.</p>
<p>Given an integer array <code>destination</code> and an integer <code>k</code>, return <em>the</em> <code>kth</code><em><strong>lexicographically smallest instructions</strong> that will take Bob to</em> <code>destination</code>.</p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/12/ex1.png" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: destination = [2,3], k = 1</span><br><span class="line">Output: &quot;HHHVV&quot;</span><br><span class="line">Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:</span><br><span class="line">[&quot;HHHVV&quot;, &quot;HHVHV&quot;, &quot;HHVVH&quot;, &quot;HVHHV&quot;, &quot;HVHVH&quot;, &quot;HVVHH&quot;, &quot;VHHHV&quot;, &quot;VHHVH&quot;, &quot;VHVHH&quot;, &quot;VVHHH&quot;].</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2020/10/12/ex2.png" alt="img"></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: destination = [2,3], k = 2</span><br><span class="line">Output: &quot;HHVHV&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<p><strong><img src="https://assets.leetcode.com/uploads/2020/10/12/ex3.png" alt="img"></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: destination = [2,3], k = 3</span><br><span class="line">Output: &quot;HHVVH&quot;</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>destination.length == 2</code></li>
<li><code>1 &lt;= row, column &lt;= 15</code></li>
<li><code>1 &lt;= k &lt;= nCr(row + column, row)</code>, where <code>nCr(a, b)</code> denotes <code>a</code> choose <code>b</code>.</li>
</ul>
<p><font color="red">solution</font></p>
<p>&#x4E00;&#x9053;&#x7EC4;&#x5408;&#x6570;&#x5B66;&#x7684;&#x9898;</p>
<p><em>c</em>[<em>n</em>][<em>k</em>]=<em>c</em>[<em>n</em>&#x2212;1][<em>k</em>&#x2212;1]+<em>c</em>[<em>n</em>&#x2212;1][<em>k</em>]</p>
<p>&#xB7;&#xB7;&#xB7;</p>
<p>&#x5224;&#x65AD;K&#x6709;&#x6CA1;&#x6709;&#x6BD4;H&#x5F00;&#x5934;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x6570;&#x76EE;&#x5927;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x4EE5;H&#x5F00;&#x5934;&#xFF0C;&#x7136;&#x540E;&#x5F80;&#x540E;&#x79FB;&#x52A8;&#x4E00;&#x4F4D;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> com[<span class="number">40</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        com[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">30</span>;++i)</span><br><span class="line">        {</span><br><span class="line">            com[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">15</span>;++j)</span><br><span class="line">                com[i][j]=com[i<span class="number">-1</span>][j<span class="number">-1</span>]+com[i<span class="number">-1</span>][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">kthSmallestPath</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; destination, <span class="keyword">int</span> k)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> x=destination[<span class="number">0</span>],y=destination[<span class="number">1</span>];<span class="comment">//v,h</span></span><br><span class="line">            init();</span><br><span class="line">            <span class="built_in">string</span> str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,imax=x+y;i&lt;imax;++i)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span>(y&gt;<span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">int</span> cnt=com[x+y<span class="number">-1</span>][y<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(k&gt;cnt)</span><br><span class="line">                    {</span><br><span class="line">                        str+=<span class="string">&apos;V&apos;</span>;</span><br><span class="line">                        x--;</span><br><span class="line">                        k-=cnt;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    {</span><br><span class="line">                        str+=<span class="string">&apos;H&apos;</span>;</span><br><span class="line">                        y--;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                        str+=<span class="string">&apos;V&apos;</span>;</span><br><span class="line">                        x--;</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>好题</tag>
        <tag>combinatorial mathematics</tag>
      </tags>
  </entry>
  <entry>
    <title>5556. Furthest Building You Can Reach</title>
    <url>/2020/11/02/5556-Furthest-Building-You-Can-Reach/</url>
    <content><![CDATA[<h4 id="5556-Furthest-Building-You-Can-Reach"><a href="https://leetcode-cn.com/problems/furthest-building-you-can-reach/">5556. Furthest Building You Can Reach</a></h4>
<a id="more"></a>
<p>&#x96BE;&#x5EA6;&#x4E2D;&#x7B49;14</p>
<p>You are given an integer array <code>heights</code> representing the heights of buildings, some <code>bricks</code>, and some <code>ladders</code>.</p>
<p>You start your journey from building <code>0</code> and move to the next building by possibly using bricks or ladders.</p>
<p>While moving from building <code>i</code> to building <code>i+1</code> (<strong>0-indexed</strong>),</p>
<ul>
<li>If the current building&#x2019;s height is <strong>greater than or equal</strong> to the next building&#x2019;s height, you do <strong>not</strong> need a ladder or bricks.</li>
<li>If the current building&#x2019;s height is <strong>less than</strong> the next building&#x2019;s height, you can either use <strong>one ladder</strong> or <code>(h[i+1] - h[i])</code> <strong>bricks</strong>.</li>
</ul>
<p><em>Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.</em></p>
<p><strong>Example 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/27/q4.gif" alt="img"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1</span><br><span class="line">Output: 4</span><br><span class="line">Explanation: Starting at building 0, you can follow these steps:</span><br><span class="line">- Go to building 1 without using ladders nor bricks since 4 &gt;= 2.</span><br><span class="line">- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 &lt; 7.</span><br><span class="line">- Go to building 3 without using ladders nor bricks since 7 &gt;= 6.</span><br><span class="line">- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 &lt; 9.</span><br><span class="line">It is impossible to go beyond building 4 because you do not have any more bricks or ladders.</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2</span><br><span class="line">Output: 7</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: heights = [14,3,19,3], bricks = 17, ladders = 0</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= heights.length &lt;= 105</code></li>
<li><code>1 &lt;= heights[i] &lt;= 106</code></li>
<li><code>0 &lt;= bricks &lt;= 109</code></li>
<li><code>0 &lt;= ladders &lt;= heights.length</code></li>
</ul>
<h4 id="font-color-green-solution-one-font"><font color="green">solution one</font></h4>
<p>&#x66B4;&#x529B;dfs&#x8D85;&#x65F6;,&#x771F;&#x6EF4;&#x5934;&#x75DB;&#xFF0C;&#x7EE7;&#x7EED;&#x60F3;&#x5427;&#x3002;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line">	<span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">furthestBuilding</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights, <span class="keyword">int</span> bricks, <span class="keyword">int</span> ladders)</span> </span>{</span><br><span class="line">    	len=heights.size();</span><br><span class="line">    	<span class="keyword">if</span>(len==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    	<span class="keyword">return</span> fun(heights,bricks,ladders,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;heights,<span class="keyword">int</span> bricks,<span class="keyword">int</span> ladders,<span class="keyword">int</span> index )</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    	<span class="keyword">if</span>(index==len<span class="number">-1</span>)</span><br><span class="line">    	{</span><br><span class="line">    		<span class="keyword">return</span> index;</span><br><span class="line">    	}</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    	{</span><br><span class="line">    		<span class="keyword">if</span>(heights[index]&gt;=heights[index+<span class="number">1</span>])</span><br><span class="line">    			<span class="keyword">return</span> fun(heights,bricks,ladders,index+<span class="number">1</span>);</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">    		{</span><br><span class="line">    			<span class="keyword">if</span>(ladders==<span class="number">0</span>&amp;&amp;bricks&lt;heights[index+<span class="number">1</span>]-heights[index])<span class="keyword">return</span> index;</span><br><span class="line">    			<span class="keyword">else</span> <span class="keyword">if</span>(ladders==<span class="number">0</span>)</span><br><span class="line">    				<span class="keyword">return</span> fun(heights,bricks-(heights[index+<span class="number">1</span>]-heights[index]),ladders,index+<span class="number">1</span>);</span><br><span class="line">    			<span class="keyword">else</span> <span class="keyword">if</span>(bricks&lt;heights[index+<span class="number">1</span>]-heights[index])</span><br><span class="line">    				<span class="keyword">return</span> fun(heights,bricks,ladders<span class="number">-1</span>,index+<span class="number">1</span>);</span><br><span class="line">    			<span class="keyword">else</span></span><br><span class="line">    				<span class="keyword">return</span> max(fun(heights,bricks,ladders<span class="number">-1</span>,index+<span class="number">1</span>),fun(heights,bricks-(heights[index+<span class="number">1</span>]-heights[index]),ladders,index+<span class="number">1</span>));</span><br><span class="line">    		}</span><br><span class="line"></span><br><span class="line">    	}</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h4 id="font-color-red-solution-two-font"><font color="red">solution two </font></h4>
<p>&#x7EC8;&#x4E8E;&#x60F3;&#x51FA;&#x6765;&#x4E86;&#xFF01;</p>
<p>&#x7528;&#x8D2A;&#x5FC3;&#xFF0C;&#x7136;&#x540E;&#x501F;&#x7528;top k&#x7684;&#x601D;&#x60F3;&#x3002;</p>
<p>&#x5047;&#x8BBE;&#x6700;&#x957F;&#x662F;<code>x</code>&#xFF0C;&#x90A3;&#x4E48;<code>k</code>&#x4E2A;&#x68AF;&#x5B50;&#x6700;&#x597D;&#x662F;&#x7528;&#x5728;&#x8DDD;&#x79BB;&#x5DEE;&#x6700;&#x5927;&#x7684;&#x524D;<code>k</code>&#x4E2A;&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x4E8C;&#x53C9;&#x5806;&#x53BB;&#x7EF4;&#x62A4;top k&#x3002;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//top k</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt;que;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">0</span>;<span class="comment">//&#x9AD8;&#x4F4E;&#x5DEE;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">furthestBuilding</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; heights, <span class="keyword">int</span> bricks, <span class="keyword">int</span> ladders)</span> </span>{</span><br><span class="line">    	<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">for</span>( i=<span class="number">0</span>;i&lt;heights.size()<span class="number">-1</span>;i++)</span><br><span class="line">    	{ </span><br><span class="line">    		<span class="keyword">if</span>(heights[i]&gt;=heights[i+<span class="number">1</span>])<span class="keyword">continue</span>;</span><br><span class="line">    		<span class="keyword">else</span></span><br><span class="line">    		{</span><br><span class="line">    			<span class="keyword">int</span> dis=heights[i+<span class="number">1</span>]-heights[i];</span><br><span class="line">    			<span class="keyword">if</span>(que.size()&lt;ladders)<span class="comment">//&#x5806;&#x8FD8;&#x672A;&#x6EE1;</span></span><br><span class="line">    				que.push(dis);</span><br><span class="line">    			<span class="keyword">else</span></span><br><span class="line">    			{</span><br><span class="line">    				<span class="keyword">if</span>(ladders!=<span class="number">0</span>&amp;&amp;dis&gt;que.top())<span class="comment">//&#x7EF4;&#x62A4; top k&#x7684;&#x4F18;&#x5148;&#x961F;&#x5217;</span></span><br><span class="line">    				{</span><br><span class="line">    					sum+=que.top();</span><br><span class="line">    					que.pop();</span><br><span class="line">    					que.push(dis);</span><br><span class="line">    				}</span><br><span class="line">    				<span class="keyword">else</span></span><br><span class="line">    					sum+=dis;</span><br><span class="line">    			}</span><br><span class="line"></span><br><span class="line">    		}</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;bricks)<span class="keyword">break</span>;</span><br><span class="line">    	}</span><br><span class="line">    	<span class="keyword">return</span> i;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<p>&#x6267;&#x884C;&#x7ED3;&#x679C;&#xFF1A;</p>
<p>&#x901A;&#x8FC7;</p>
<p>&#x663E;&#x793A;&#x8BE6;&#x60C5;</p>
<p>&#x6267;&#x884C;&#x7528;&#x65F6;&#xFF1A;172 ms, &#x5728;&#x6240;&#x6709; C++ &#x63D0;&#x4EA4;&#x4E2D;&#x51FB;&#x8D25;&#x4E86;100.00%&#x7684;&#x7528;&#x6237;</p>
<p>&#x5185;&#x5B58;&#x6D88;&#x8017;&#xFF1A;44.8 MB, &#x5728;&#x6240;&#x6709; C++ &#x63D0;&#x4EA4;&#x4E2D;&#x51FB;&#x8D25;&#x4E86;100.00%&#x7684;&#x7528;&#x6237;</p>
<h4 id="Supplementary-knowledge">Supplementary  knowledge</h4>
<p>&#x4F18;&#x5148;&#x961F;&#x5217;&#x7684;&#x4E00;&#x4E9B;&#x7528;&#x6CD5;&#xFF0C;&#x6709;&#x70B9;&#x5FD8;&#x4E86;&#xFF0C;&#x8865;&#x5145;&#x4E00;&#x4E0B;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">priority_queue</span>&#x9ED8;&#x8BA4;&#x4E3A;&#x5927;&#x9876;&#x5806;&#xFF0C;&#x5373;&#x5806;&#x9876;&#x5143;&#x7D20;&#x4E3A;&#x5806;&#x4E2D;&#x6700;&#x5927;&#x5143;&#x7D20;&#x3002;</span><br><span class="line"> <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; q;  <span class="comment">// &#x5347;&#x5E8F; &#x5C0F;&#x9876;&#x5806; &#x548C;sort&#x91CC;&#x7684;greater&#x4E0D;&#x4E00;&#x6837;</span></span><br><span class="line"> <span class="comment">//&#x6CE8;&#x610F; &gt; &gt;&#x5FC5;&#x987B;&#x5206;&#x5F00; &#x5426;&#x5219;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x8BEF;&#x8BA4;</span></span><br><span class="line">q.top();</span><br><span class="line"></span><br><span class="line"><span class="comment">//pair&#x7684;&#x6BD4;&#x8F83;&#x7ED3;&#x679C;&#xFF0C;&#x5148;&#x6309;&#x7167;pair&#x7684;first&#x5143;&#x7D20;&#x964D;&#x5E8F;&#xFF0C;first&#x5143;&#x7D20;&#x76F8;&#x7B49;&#x65F6;&#xFF0C;&#x518D;&#x6309;&#x7167;second&#x5143;&#x7D20;&#x964D;&#x5E8F;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#x81EA;&#x5B9A;&#x4E49;&#x6BD4;&#x8F83;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>{</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    Node(<span class="keyword">int</span> a=<span class="number">0</span>, <span class="keyword">int</span> b=<span class="number">0</span>):</span><br><span class="line">        x(a),y(b){}</span><br><span class="line">};</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node a, Node b){<span class="comment">//&#x8FD4;&#x56DE;true&#x65F6;&#xFF0C;&#x8BF4;&#x660E;a&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#x4E8E;b &#x91CD;&#x8F7D;&#x5C0F;&#x4E8E;&#x53F7;</span></span><br><span class="line">    <span class="comment">//x&#x503C;&#x8F83;&#x5927;&#x7684;Node&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#xFF08;x&#x5C0F;&#x7684;Node&#x6392;&#x5728;&#x961F;&#x524D;&#xFF09;</span></span><br><span class="line">    <span class="comment">//x&#x76F8;&#x7B49;&#x65F6;&#xFF0C;y&#x5927;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x4F4E;&#xFF08;y&#x5C0F;&#x7684;Node&#x6392;&#x5728;&#x961F;&#x524D;&#xFF09;</span></span><br><span class="line">    <span class="keyword">if</span>( a.x== b.x ) <span class="keyword">return</span> a.y&gt; b.y;</span><br><span class="line">    <span class="keyword">return</span> a.x&gt; b.x;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>好题</tag>
        <tag>贪心</tag>
        <tag>top k</tag>
      </tags>
  </entry>
  <entry>
    <title>5555. Count Sorted Vowel Strings</title>
    <url>/2020/11/01/5555-Count-Sorted-Vowel-Strings/</url>
    <content><![CDATA[<h4 id="5555-Count-Sorted-Vowel-Strings"><a href="https://leetcode-cn.com/problems/count-sorted-vowel-strings/">5555. Count Sorted Vowel Strings</a></h4>
<a id="more"></a>
<p>&#x96BE;&#x5EA6;&#x4E2D;&#x7B49;8</p>
<p>Given an integer <code>n</code>, return <em>the number of strings of length</em> <code>n</code> <em>that consist only of vowels (</em><code>a</code><em>,</em> <code>e</code><em>,</em> <code>i</code><em>,</em> <code>o</code><em>,</em> <code>u</code><em>) and are <strong>lexicographically sorted</strong>.</em></p>
<p>A string <code>s</code> is <strong>lexicographically sorted</strong> if for all valid <code>i</code>, <code>s[i]</code> is the same as or comes before <code>s[i+1]</code> in the alphabet.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Output: 5</span><br><span class="line">Explanation: The 5 sorted strings that consist of vowels only are [&quot;a&quot;,&quot;e&quot;,&quot;i&quot;,&quot;o&quot;,&quot;u&quot;].</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n = 2</span><br><span class="line">Output: 15</span><br><span class="line">Explanation: The 15 sorted strings that consist of vowels only are</span><br><span class="line">[&quot;aa&quot;,&quot;ae&quot;,&quot;ai&quot;,&quot;ao&quot;,&quot;au&quot;,&quot;ee&quot;,&quot;ei&quot;,&quot;eo&quot;,&quot;eu&quot;,&quot;ii&quot;,&quot;io&quot;,&quot;iu&quot;,&quot;oo&quot;,&quot;ou&quot;,&quot;uu&quot;].</span><br><span class="line">Note that &quot;ea&quot; is not a valid string since &apos;e&apos; comes after &apos;a&apos; in the alphabet.</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: n = 33</span><br><span class="line">Output: 66045</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= n &lt;= 50</code></li>
</ul>
<h4 id="font-color-red-my-solution-font"><font color="red"> my solution</font></h4>
<p>&#x66B4;&#x529B;<code>dfs</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;tmp;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">countVowelStrings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">    	fun(n,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    	<span class="keyword">return</span> cnt;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> times,<span class="keyword">int</span> last)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    	<span class="keyword">if</span>(times==n)</span><br><span class="line">    	{</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">auto</span> x:tmp)</span><br><span class="line">    			<span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    		cnt++;<span class="keyword">return</span> ;</span><br><span class="line">    	}</span><br><span class="line">    	<span class="keyword">else</span></span><br><span class="line">    	{</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=last;i&lt;<span class="number">5</span>;++i)</span><br><span class="line">    		{</span><br><span class="line">    			tmp.push_back(i);</span><br><span class="line">    			fun(n,times+<span class="number">1</span>,i);</span><br><span class="line">    			tmp.pop_back();</span><br><span class="line">    		}</span><br><span class="line">    	}</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h4 id="darao&#x2019;s-solution">darao&#x2019;s solution</h4>
<p>&#x6211;&#x5176;&#x5B9E;&#x4E5F;&#x89C9;&#x5F97;&#x6709;&#x66F4;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x6BD4;&#x8D5B;&#x6CA1;&#x6709;&#x4ED4;&#x7EC6;&#x53BB;&#x60F3;&#xFF0C;&#x8FD8;&#x5F97;&#x591A;&#x7EC3;&#x54CE;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countVowelStrings</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>][n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">6</span>; ++i){</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;=n; ++j){</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">0</span>) dp[i][j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(j == <span class="number">0</span>) dp[i][j] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(i!= <span class="number">0</span> &amp;&amp; j!=<span class="number">0</span>){</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>] +dp[i<span class="number">-1</span>][j];</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">5</span>][n];</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>dp</tag>
        <tag>dfs</tag>
        <tag>好题</tag>
      </tags>
  </entry>
  <entry>
    <title>5554. Check Array Formation Through Concatenation</title>
    <url>/2020/11/01/5554-Check-Array-Formation-Through-Concatenation/</url>
    <content><![CDATA[<p>213&#x5468;&#x8D5B; Q1</p>
<h4 id="5554-Check-Array-Formation-Through-Concatenation"><a href="https://leetcode-cn.com/problems/check-array-formation-through-concatenation/">5554. Check Array Formation Through Concatenation</a></h4>
<a id="more"></a>
<p>You are given an array of <strong>distinct</strong> integers <code>arr</code> and an array of integer arrays <code>pieces</code>, where the integers in <code>pieces</code> are <strong>distinct</strong>. Your goal is to form <code>arr</code> by concatenating the arrays in <code>pieces</code> <strong>in any order</strong>. However, you are <strong>not</strong> allowed to reorder the integers in each array <code>pieces[i]</code>.</p>
<p>Return <code>true</code> <em>if it is possible</em> <em>to form the array</em> <code>arr</code> <em>from</em> <code>pieces</code>. Otherwise, return <code>false</code>.</p>
<p><strong>Example 1:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr = [85], pieces = [[85]]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure>
<p><strong>Example 2:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr = [15,88], pieces = [[88],[15]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Concatenate [15] then [88]</span><br></pre></td></tr></table></figure>
<p><strong>Example 3:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr = [49,18,16], pieces = [[16,18,49]]</span><br><span class="line">Output: false</span><br><span class="line">Explanation: Even though the numbers match, we cannot reorder pieces[0].</span><br></pre></td></tr></table></figure>
<p><strong>Example 4:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]</span><br><span class="line">Output: true</span><br><span class="line">Explanation: Concatenate [91] then [4,64] then [78]</span><br></pre></td></tr></table></figure>
<p><strong>Example 5:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure>
<p><strong>Constraints:</strong></p>
<ul>
<li><code>1 &lt;= pieces.length &lt;= arr.length &lt;= 100</code></li>
<li><code>sum(pieces[i].length) == arr.length</code></li>
<li><code>1 &lt;= pieces[i].length &lt;= arr.length</code></li>
<li><code>1 &lt;= arr[i], pieces[i][j] &lt;= 100</code></li>
<li>The integers in <code>arr</code> are <strong>distinct</strong>.</li>
<li>The integers in <code>pieces</code> are <strong>distinct</strong> (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).</li>
</ul>
<p><font size="10" color="red">solution </font></p>
<p>&#x7528;&#x4E86;<code>find</code>&#x5B8C;&#x4E8B;&#x4E86;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w)</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">    	<span class="keyword">return</span> v[<span class="number">0</span>]&lt;w[<span class="number">0</span>];</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">canFormArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; arr, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; pieces)</span> </span>{</span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">auto</span> x:pieces)</span><br><span class="line">    	{</span><br><span class="line">    		<span class="keyword">int</span> index=lower_bound(arr.begin(),arr.end(),x[<span class="number">0</span>])-arr.begin();</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">auto</span> j:x)</span><br><span class="line">    			<span class="keyword">if</span>(j!=arr[index++])</span><br><span class="line">    				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    	}</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
  </entry>
  <entry>
    <title>Rich dad por dad</title>
    <url>/2020/10/31/Rich-dad-por-dad/</url>
    <content><![CDATA[<p>reading rich dad poor dad</p>
<a id="more"></a>
<h1>Introduction</h1>
<div class="note primary">
            <p>There is a difference between being poor and being broke. Broke is temporary. Poor is eternal.</p>
          </div>
<p>&#x4E00;&#x4E2A;&#x6682;&#x65F6;&#x6027;&#x548C;&#x666E;&#x904D;&#x6027;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5F88;&#x591A;&#x5730;&#x65B9;&#x90FD;&#x5B58;&#x5728;&#xFF0C;&#x6BD4;&#x5982;&#x4F60;&#x5B66;&#x4E60;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x67D0;&#x6B21;&#x8003;&#x8BD5;broken&#x4E86;&#xFF0C;&#x8981;&#x544A;&#x8BC9;&#x81EA;&#x5DF1;&#x8FD9;&#x662F;&#x6682;&#x65F6;&#x7684;&#xFF0C;keep moving&#x3002;&#x540C;&#x7406;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x91D1;&#x878D;&#x80FD;&#x529B;&#x4E0D;&#x5F3A;&#xFF0C;&#x4F46;&#x662F;&#x67D0;&#x6B21;&#x6295;&#x8D44;&#x5F88;&#x6210;&#x529F;&#xFF0C;&#x4E5F;&#x8981;&#x544A;&#x8BC9;&#x81EA;&#x5DF1;&#x8FD9;&#x662F;&#x4FA5;&#x5E78;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x4F60;&#x7684;&#x80FD;&#x529B;&#x662F;&#x4F60;&#x7684;&#x4EF7;&#x503C;&#xFF0C;&#x4F60;&#x7684;&#x56DE;&#x62A5;&#x662F;&#x4F60;&#x7684;&#x4EF7;&#x683C;&#xFF0C;&#xFF0C;&#x628A;&#x65F6;&#x95F4;&#x62C9;&#x957F;&#x8FDC;&#x4E00;&#x4E9B;&#xFF0C;&#x4EF7;&#x683C;&#x56DE;&#x5FE0;&#x4E8E;&#x4EF7;&#x503C;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x52AA;&#x529B;&#x63D0;&#x5347;&#x81EA;&#x5DF1;&#x7684;&#x80FD;&#x529B;&#x3002;</p>
<h1>LESSION 1</h1>
]]></content>
      <categories>
        <category>reading note</category>
      </categories>
      <tags>
        <tag>finance</tag>
      </tags>
  </entry>
  <entry>
    <title>激光炸弹</title>
    <url>/2020/10/30/%E6%BF%80%E5%85%89%E7%82%B8%E5%BC%B9/</url>
    <content><![CDATA[<p>&#x4E00;&#x79CD;&#x65B0;&#x578B;&#x7684;&#x6FC0;&#x5149;&#x70B8;&#x5F39;&#xFF0C;&#x53EF;&#x4EE5;&#x6467;&#x6BC1;&#x4E00;&#x4E2A;&#x8FB9;&#x957F;&#x4E3A;R&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x5185;&#x7684;&#x6240;&#x6709;&#x7684;&#x76EE;&#x6807;&#x3002;&#x73B0;&#x5728;&#x5730;&#x56FE;&#x4E0A;&#x6709;n(N&lt;=10000)&#x4E2A;&#x76EE;&#x6807;&#xFF0C;&#x7528;&#x6574;&#x6570;Xi,Yi(&#x5176;&#x503C;&#x5728;[0,5000])&#x8868;&#x793A;&#x76EE;&#x6807;&#x5728;&#x5730;&#x56FE;&#x4E0A;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6BCF;&#x4E2A;&#x76EE;&#x6807;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x4EF7;&#x503C;&#x3002;&#x6FC0;&#x5149;&#x70B8;&#x5F39;&#x7684;&#x6295;&#x653E;&#x662F;&#x901A;&#x8FC7;&#x536B;&#x661F;&#x5B9A;&#x4F4D;&#x7684;&#xFF0C;&#x4F46;&#x5176;&#x6709;&#x4E00;&#x4E2A;&#x7F3A;&#x70B9;&#xFF0C;&#x5C31;&#x662F;&#x5176;&#x7206;&#x7834;&#x8303;&#x56F4;&#xFF0C;&#x5373;&#x90A3;&#x4E2A;&#x8FB9;&#x957F;&#x4E3A;R&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x5FC5;&#x987B;&#x548C;x&#xFF0C;y&#x8F74;&#x5E73;&#x884C;&#x3002;&#x82E5;&#x76EE;&#x6807;&#x4F4D;&#x4E8E;&#x7206;&#x7834;&#x6B63;&#x65B9;&#x5F62;&#x7684;&#x8FB9;&#x4E0A;&#xFF0C;&#x8BE5;&#x76EE;&#x6807;&#x5C06;&#x4E0D;&#x4F1A;&#x88AB;&#x6467;&#x6BC1;&#x3002;</p>
<a id="more"></a>
<h3 id="&#x8F93;&#x5165;&#x683C;&#x5F0F;">&#x8F93;&#x5165;&#x683C;&#x5F0F;</h3>
<p>&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x4E3A;&#x6B63;&#x6574;&#x6570;n&#x548C;&#x6B63;&#x6574;&#x6570;R&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x7684;n&#x884C;&#x6BCF;&#x884C;&#x6709;3&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;xi,yi,vi</p>
<h3 id="&#x8F93;&#x51FA;&#x683C;&#x5F0F;">&#x8F93;&#x51FA;&#x683C;&#x5F0F;</h3>
<p>&#x8F93;&#x51FA;&#x6587;&#x4EF6;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x4E00;&#x9897;&#x70B8;&#x5F39;&#x6700;&#x591A;&#x80FD;&#x70B8;&#x6389;&#x5730;&#x56FE;&#x4E0A;&#x603B;&#x4EF7;&#x503C;&#x4E3A;&#x591A;&#x5C11;&#x7684;&#x76EE;&#x6807;&#xFF08;&#x7ED3;&#x679C;&#x4E0D;&#x4F1A;&#x8D85;&#x8FC7;32767&#xFF09;&#x3002;</p>
<p>Sample Input</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2 1</span><br><span class="line">0 0 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure>
<p>Sample Output</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>
<p><font color="red">solution</font></p>
<p>&#x524D;&#x7F00;&#x548C;&#x7684;&#x57FA;&#x672C;&#x5E94;&#x7528;</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5005</span>;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,r;</span><br><span class="line"><span class="keyword">int</span> z=INT_MIN;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;r;</span><br><span class="line">	<span class="keyword">int</span> x,y,v;</span><br><span class="line">	<span class="keyword">while</span>(n--)</span><br><span class="line">	{</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y&gt;&gt;v;</span><br><span class="line">		maze[x+<span class="number">1</span>][y+<span class="number">1</span>]=v;</span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;maxn;++j)</span><br><span class="line">			maze[i][j]+=maze[i<span class="number">-1</span>][j]+maze[i][j<span class="number">-1</span>]-maze[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&lt;maxn;++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=r;j&lt;maxn;++j)</span><br><span class="line">			z=max(z,maze[i][j]-maze[i-r][j]-maze[i][j-r]+maze[i-r][j-r]);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;z;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<h4 id="&#x8865;&#x5145;">&#x8865;&#x5145;</h4>
<p><strong>1&#x3001;&#x7B80;&#x4ECB;</strong><br>
&#x524D;&#x7F00;&#x548C;&#x4E5F;&#x662F;&#x4E00;&#x4E2A;&#x5728;&#x6BD4;&#x8D5B;&#x4E2D;&#x6BD4;&#x8F83;&#x5B9E;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x4ED6;&#x80FD;&#x5F88;&#x5FEB;&#x5F97;&#x6C42;&#x51FA;&#x4E00;&#x4E2A;&#x533A;&#x95F4;&#x7684;&#x548C;&#xFF0C;&#x901F;&#x5EA6;&#x4E3A;O(1)&#x3002;<br>
&#x4E00;&#x7EF4;&#x7684;&#x524D;&#x7F00;&#x548C;&#x5982;sum[ i ]&#x662F;&#x6307;&#x6570;&#x7EC4;&#x524D;i&#x4F4D;&#x7684;&#x6240;&#x6709;&#x548C;&#xFF0C;&#x5982;&#x6C42;&#x533A;&#x95F4;x&#x5230;y&#x7684;&#x548C;&#x53EA;&#x9700;sum[ y ] - sum[ x ]&#x3002;<br>
&#x4E8C;&#x7EF4;&#x7684;&#x524D;&#x7F00;&#x548C;&#x5982;sum[ i ][ j ]&#x662F;&#x6307;(i,j)&#x70B9;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x7684;&#x77E9;&#x9635;&#x548C;&#xFF0C;&#x53CA;0 &#x2013; i&#x884C;&#x4E14;0 &#x2013; j&#x5217;&#x7684;&#x548C;&#x3002;&#x4ED6;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x7684;&#x6C42;&#x51FA;&#x77E9;&#x9635;&#x4E2D;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x5B50;&#x77E9;&#x9635;&#x7684;&#x548C;&#xFF0C;&#x5982;&#x6C42;&#x957F;&#x4E3A;l&#x4E14;&#x53F3;&#x4E0B;&#x89D2;&#x9876;&#x70B9;&#x4E3A;(i,j)&#x7684;&#x6B63;&#x65B9;&#x5F62;&#x53EA;&#x9700;sum[ i ][ j ] - sum[ i ][ j - l ] - sum[ i - l ][ j ] + sum[ i - l ][ j - l ]&#x3002;</p>
]]></content>
      <categories>
        <category>vjudge</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda</title>
    <url>/2020/10/30/lambda/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>lambda</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<p>1100=11*2^10^</p>
<p>12=3*2^2^</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-part1</title>
    <url>/2020/10/29/python-part1/</url>
    <content><![CDATA[<p>&#x8F93;&#x5165;&#x8F93;&#x51FA;&#xFF0C;&#x5E8F;&#x5217;</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># annotation </span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line">print(<span class="string">&apos;hello world&apos;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>hello world
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&#x9664;&#x6CD5;&#x6D6E;&#x70B9;&#x6570;</span></span><br><span class="line">print(<span class="number">1</span>/<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x9664;&#x6CD5;&#x4FDD;&#x7559;&#x6574;&#x6570;</span></span><br><span class="line">print(<span class="number">1</span>//<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x5E42;&#x8FD0;&#x7B97;</span></span><br><span class="line">print(<span class="number">2</span>**<span class="number">3</span>)</span><br><span class="line">print(pow(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#abs absolute &#x7EDD;&#x5BF9;&#x503C;</span></span><br><span class="line">print(abs(<span class="number">-4</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment">#floor &#x5411;&#x4E0B;&#x53D6;&#x6574;</span></span><br><span class="line">print(math.floor(<span class="number">1.2</span>))</span><br><span class="line"><span class="comment">#ceil &#x5411;&#x4E0A;&#x53D6;&#x6574;</span></span><br><span class="line">print(math.ceil(<span class="number">1.2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>0.5
0
8
8
4
1
2
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#input</span></span><br><span class="line">name=input(<span class="string">&quot;what&apos;s your name?&quot;</span>)</span><br><span class="line">school=input(<span class="string">&quot;what&apos;s your school&quot;</span>)</span><br><span class="line">print(name+<span class="string">&quot; comes from &quot;</span>+school)</span><br><span class="line"></span><br><span class="line">x=input(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">y=input(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line">print(x*y)</span><br></pre></td></tr></table></figure>
<pre><code>what&apos;s your name?cozy
what&apos;s your schoolmoyu
cozy comes from moyu
x:2
y:3



---------------------------------------------------------------------------

TypeError                                 Traceback (most recent call last)

&lt;ipython-input-43-10e99196240a&gt; in &lt;module&gt;()
      6 x=input(&quot;x:&quot;)
      7 y=input(&quot;y:&quot;)
----&gt; 8 print(x*y)


TypeError: can&apos;t multiply sequence by non-int of type &apos;str&apos;
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#input&#x8FD4;&#x56DE;&#x7684;&#x662F;str&#x7C7B;&#x578B;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x7C7B;&#x578B;&#x8F6C;&#x6362;</span></span><br><span class="line">x=input(<span class="string">&quot;x:&quot;</span>)</span><br><span class="line">y=input(<span class="string">&quot;y:&quot;</span>)</span><br><span class="line">print(int(x)*int(y))</span><br></pre></td></tr></table></figure>
<pre><code>x:2
y:3
6
</code></pre>
<p>#&#x5E8F;&#x5217;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"><span class="string">&#x5E8F;&#x5217;</span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line">faker=[<span class="string">&apos;shenzheng&apos;</span>,<span class="number">19</span>]</span><br><span class="line">truth=[<span class="string">&apos;beijing&apos;</span>,<span class="number">21</span>]</span><br><span class="line">future=[faker,truth]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#index</span></span><br><span class="line">print(future)</span><br><span class="line">print(future[<span class="number">0</span>])</span><br><span class="line">print(future[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">print(future[<span class="number">-1</span>])<span class="comment">#last one</span></span><br></pre></td></tr></table></figure>
<pre><code>[[&apos;shenzheng&apos;, 19], [&apos;beijing&apos;, 21]]
[&apos;shenzheng&apos;, 19]
shenzheng
[&apos;beijing&apos;, 21]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&#x591A;&#x884C;&#x663E;&#x793A; \</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>\</span><br><span class="line">  +<span class="number">2</span>*<span class="number">2</span></span><br><span class="line">    </span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x8BED;&#x53E5;&#x4E2D;&#x5305;&#x542B; [], {} &#x6216; () &#x62EC;&#x53F7;&#x5C31;&#x4E0D;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x591A;&#x884C;&#x8FDE;&#x63A5;&#x7B26;&#x3002;</span></span><br><span class="line">truth=[<span class="string">&apos;beijing&apos;</span>,</span><br><span class="line">               <span class="number">21</span>]</span><br><span class="line">print(truth)</span><br></pre></td></tr></table></figure>
<pre><code>10
[&apos;beijing&apos;, 21]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#slicing</span></span><br><span class="line"><span class="comment">#&#x7B2C;&#x4E8C;&#x4E2A;&#x7D22;&#x5F15;&#x662F;&#x5207;&#x7247;&#x540E;&#x4F59;&#x4E0B;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7F16;&#x53F7;</span></span><br><span class="line">dream=<span class="string">&quot;be a nice boy&quot;</span></span><br><span class="line">print(dream[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line">print(dream[<span class="number">0</span>:<span class="number">0</span>])</span><br><span class="line">print(dream[<span class="number">0</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x4F46;&#x7B2C;&#x4E8C;&#x4E2A;&#x7D22;&#x5F15;&#x662F;&#x5207;&#x7247;&#x540E;&#x4F59;&#x4E0B;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x7F16;&#x53F7;</span></span><br><span class="line">test=<span class="string">&quot;12&quot;</span></span><br><span class="line">print(test[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment">#&#x7B49;&#x4EF7;&#x4E8E;</span></span><br><span class="line">print(test[<span class="number">0</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x8C03;&#x6574;&#x6B65;&#x957F;</span></span><br><span class="line">print(dream[::<span class="number">3</span>])</span><br><span class="line">print(dream[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>b

be a nice bo
12
12
bai y
yob ecin a eb
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"><span class="string">&#x5E8F;&#x5217;&#x76F8;&#x52A0;</span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line">[<span class="string">&apos;co&apos;</span>]+[<span class="string">&apos;z&apos;</span>,<span class="string">&apos;y&apos;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>[&apos;xiao&apos;, &apos;jun&apos;, &apos;yi&apos;]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"><span class="string">&#x4E58;&#x6CD5;</span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]*<span class="number">10</span></span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&#x5728;Python&#x4E2D;&#xFF0C;None&#x8868;&#x793A;&#x4EC0;&#x4E48;&#x90FD;&#x6CA1;&#x6709; none &#x7A7A;&#x5217;&#x8868; &#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">sequence=[<span class="literal">None</span>]*<span class="number">10</span></span><br><span class="line">sequence</span><br></pre></td></tr></table></figure>
<pre><code>[None, None, None, None, None, None, None, None, None, None]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#length minimum maximum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#length</span></span><br><span class="line">numbers=[<span class="number">2020</span>,<span class="number">10</span>,<span class="number">29</span>]</span><br><span class="line">print(len(numbers))</span><br><span class="line"></span><br><span class="line">print(min(numbers))</span><br><span class="line"></span><br><span class="line">print(max(numbers))</span><br></pre></td></tr></table></figure>
<pre><code>3
10
2020
</code></pre>
<p><font color="red">&#x5143;&#x7EC4;&#x548C;&#x5217;&#x8868;&#x90FD;&#x5C5E;&#x4E8E;&#x5E8F;&#x5217;&#xFF0C;&#x4F46;&#x662F;&#x5143;&#x7EC4;&#x4E0D;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#xFF0C;&#x5217;&#x8868;&#x53EF;&#x4EE5;</font></p>
<p>##list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#list </span></span><br><span class="line"><span class="comment">##list are mutable you can change their contents</span></span><br><span class="line"></span><br><span class="line">list(<span class="string">&apos;cozy&apos;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>[&apos;c&apos;, &apos;o&apos;, &apos;z&apos;, &apos;y&apos;]
</code></pre>
<p>###basic list operations</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#item assignments</span></span><br><span class="line">x=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">x[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#deleting elements</span></span><br><span class="line"><span class="keyword">del</span> x[<span class="number">1</span>]</span><br><span class="line">print(<span class="string">&quot;after del&quot;</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#assigning to slices</span></span><br><span class="line">print(<span class="string">&quot;after assigning to slices&quot;</span>)</span><br><span class="line">name=list(<span class="string">&quot;assigning&quot;</span>)</span><br><span class="line">name[<span class="number">1</span>:]=<span class="string">&quot;lice&quot;</span></span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#append</span></span><br><span class="line">print(<span class="string">&quot;after appending&quot;</span>)</span><br><span class="line">x.append(<span class="number">6</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#count The count method counts the occurrences of an element in a list.</span></span><br><span class="line">print(x.count(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&#x6D45;&#x62F7;&#x8D1D; &#x53EA;&#x662F;&#x5C06;&#x53E6;&#x4E00;&#x4E2A;&#x540D;&#x79F0;&#x5173;&#x8054;&#x5230;&#x5217;&#x8868;&#x3002;</span></span><br><span class="line">y=x</span><br><span class="line">y[<span class="number">0</span>]=<span class="number">9</span></span><br><span class="line">print(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(<span class="string">&quot;y&quot;</span>)</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment">#&#x6DF1;&#x62F7;&#x8D1D;</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;deep copy&quot;</span>)</span><br><span class="line">z=x.copy()</span><br><span class="line">z[<span class="number">0</span>]=<span class="number">7</span></span><br><span class="line">print(<span class="string">&quot;z&quot;</span>)</span><br><span class="line">print(z)</span><br><span class="line">print(<span class="string">&quot;x&quot;</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">#expand   compare with append</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">print(<span class="string">&quot;expand&quot;</span>)</span><br><span class="line">a.extend(b)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#clear</span></span><br><span class="line">x.clear()</span><br><span class="line"></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"><span class="string">&#x8FD9;&#x53EF;&#x80FD;&#x770B;&#x8D77;&#x6765;&#x7C7B;&#x4F3C;&#x4E8E;&#x62FC;&#x63A5;&#xFF0C;&#x4F46;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x5DEE;&#x522B;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#x5C06;&#x4FEE;&#x6539;&#x88AB;&#x6269;&#x5C55;&#x7684;&#x5E8F;&#x5217;&#xFF08;&#x8FD9;&#x91CC;&#x662F;a&#xFF09;&#x3002;</span></span><br><span class="line"><span class="string">&#x5728;&#x5E38;&#x89C4;&#x62FC;&#x63A5;&#x4E2D;&#xFF0C;&#x60C5;&#x51B5;&#x662F;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5168;&#x65B0;&#x7684;&#x5E8F;&#x5217;&#x3002;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a = [1, 2, 3] b = [4, 5, 6]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a + b</span></span><br><span class="line"><span class="string">[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>a</span></span><br><span class="line"><span class="string">[1, 2, 3]</span></span><br><span class="line"><span class="string">&#x5982;&#x4F60;&#x6240;&#x89C1;&#xFF0C;&#x62FC;&#x63A5;&#x51FA;&#x6765;&#x7684;&#x5217;&#x8868;&#x4E0E;&#x524D;&#x4E00;&#x4E2A;&#x793A;&#x4F8B;&#x6269;&#x5C55;&#x5F97;&#x5230;&#x7684;&#x5217;&#x8868;&#x5B8C;&#x5168;&#x76F8;&#x540C;&#xFF0C;&#x4F46;&#x5728;&#x8FD9;&#x91CC;a&#x5E76;&#x6CA1;&#x6709;&#x88AB;&#x4FEE;</span></span><br><span class="line"><span class="string">&#x6539;&#x3002;&#x9274;&#x4E8E;&#x5E38;&#x89C4;&#x62FC;&#x63A5;&#x5FC5;&#x987B;&#x4F7F;&#x7528;a&#x548C;b&#x7684;&#x526F;&#x672C;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x5217;&#x8868;&#xFF0C;&#x56E0;&#x6B64;&#x5982;&#x679C;&#x4F60;&#x8981;&#x83B7;&#x5F97;&#x7C7B;&#x4F3C;&#x4E8E;&#x4E0B;&#x9762;&#x7684;&#x6548;&#x679C;&#xFF0C;</span></span><br><span class="line"><span class="string">&#x62FC;&#x63A5;&#x7684;&#x6548;&#x7387;&#x5C06;&#x6BD4;extend&#x4F4E;&#xFF1A;</span></span><br><span class="line"><span class="string">&apos;&apos;&apos;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#index first occurrence</span></span><br><span class="line">think=[<span class="string">&apos;i&apos;</span>, <span class="string">&apos;hate&apos;</span> ,<span class="string">&apos;you&apos;</span>]</span><br><span class="line">print(think.index(<span class="string">&apos;i&apos;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#insert</span></span><br><span class="line">think.insert(<span class="number">1</span>,<span class="string">&apos;very&apos;</span>)</span><br><span class="line">print(<span class="string">&apos;after inserting&apos;</span>)</span><br><span class="line">print(think)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sort</span></span><br><span class="line">num=[<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">num.sort( )<span class="comment">#&#x539F;&#x5E8F;&#x5217;</span></span><br><span class="line">sorted(num)<span class="comment">#create a new list</span></span><br><span class="line"></span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure>
<pre><code>[1, 1, 3, 4, 5]
after del
[1, 3, 4, 5]
after assigning to slices
[&apos;a&apos;, &apos;l&apos;, &apos;i&apos;, &apos;c&apos;, &apos;e&apos;]
after appending
[1, 3, 4, 5, 6]
1
x
[9, 3, 4, 5, 6]
y
[9, 3, 4, 5, 6]
deep copy
z
[7, 3, 4, 5, 6]
x
[9, 3, 4, 5, 6]
expand
[1, 2, 3, 4, 5, 6]
0
after inserting
[&apos;i&apos;, &apos;very&apos;, &apos;hate&apos;, &apos;you&apos;]
[1, 2, 3, 4, 5, 6, 7]
</code></pre>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Game--Tower of Hanoi</title>
    <url>/2020/10/27/Game-Tower-of-Hanoi/</url>
    <content><![CDATA[<p>&#x5B9E;&#x73B0;&#x4E86;&#x53EF;&#x4EE5;&#x81EA;&#x5DF1;&#x73A9;&#x4E5F;&#x53EF;&#x4EE5;&#x81EA;&#x52A8;&#x73A9;&#x7684;&#x6C49;&#x8BFA;&#x5854;&#x5C0F;&#x6E38;&#x620F;&#xFF0C;&#x53EF;&#x89C6;&#x5316;</p>
<a id="more"></a>
<h1>Lab 3: Tower of Hanoi</h1>
<p>In Lab 3, you are required to design and implement a game: Tower of Hanoi.</p>
<h2 id="0-The-puzzle">0 The puzzle</h2>
<p>The Tower of Hanoi is a famous mathematical puzzle. It consists of three rods and a number of<br>
disks of different sizes. Initially, all disks are in the first rod in ascending order of size (i.e., the<br>
smallest is at the top). The objective of the puzzle is to move the entire stack to another rod,<br>
obeying the following simple rules:</p>
<ol>
<li>Only one disk can be moved at a time.</li>
<li>Each move consists of taking the upper disk from one of the stacks and placing it on top of<br>
another stack or on an empty rod.</li>
<li>No larger disk may be placed on top of a smaller disk.</li>
</ol>
<p>The classical way to solve the puzzle is recursion. The algorithm could be described as the<br>
following pseudocode:</p>
<h2 id="1-Lab-Description">1 Lab Description</h2>
<p>Here are some concepts that you need to know first.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Canvas: The UI of the game.</span><br><span class="line">Rod: There are 3 rods (numbered 1, 2 3) in the canvas. Disks are pushed and popped among</span><br><span class="line">them. The source rod is 1 and the target rod is 2. Rod 3 acts as a temporary rod.</span><br><span class="line">Disk: Each disk is of different sizes. In the beginning, they are all pushed into Rod 1 in</span><br><span class="line">ascending order of size.</span><br></pre></td></tr></table></figure>
<p>You should implement the Hanoi game program with the following functionality:</p>
<ol>
<li><strong>Intial Phase:</strong> When the program starts, it firstly asks the player for the number of disks. The<br>
input should a integer in <strong>[1, 5]</strong>. If input is Q , quit the game. Other invalid input should be<br>
ignored.</li>
<li><strong>Normal Mode:</strong> Then, print the canvas in the console, and the game starts. The program<br>
continuously asks for commands until the player wins. The canvas will be printed after each<br>
move. Command format: from to. Invalid input should be ignored.</li>
<li><strong>Auto Play Mode:</strong> If the game receives command 0 0. Auto-play mode will be activated. The<br>
game will automatically continue without player&#x2019;s commands. The canvas, as well as the</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function hanoi(n, A, B, C) { // move n disks from rod A to rod B, use rod C as</span><br><span class="line">a buffer</span><br><span class="line">hanoi(n - 1 , A, C, B);</span><br><span class="line">move(n, A, B); // move the nth disk from rod A to rod B</span><br><span class="line">haoni(n - 1 , C, B, A);</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto-generated command, will be printed after each move.</span><br></pre></td></tr></table></figure>
<h3 id="Requirements">Requirements</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">You have to implement the game using Object-Oriented programming. Hope the following</span><br><span class="line">materials will help you if you&apos;re not familiar with OOP.</span><br><span class="line">Object Oriented Design</span><br><span class="line">Object Oriented Programming in C++</span><br><span class="line">Containers in STL(std::vector, std::stack, std::list, std::queue) are NOT allowed</span><br><span class="line">to use. Please implement your own Stack or Queue if needed.</span><br></pre></td></tr></table></figure>
<h2 id="2-Guidance">2 Guidance</h2>
<h3 id="2-1-Drawing-the-Canvas">2.1 Drawing the Canvas</h3>
<p>We have offered you a file, termio.h. It might be helpful for you to deal with the canvas printing</p>
<p>work.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CANVAS_WIDTH and CANVAS_HEIGHT: the width and height of the canvas.</span><br><span class="line">Clear() helps you clear the screen. Using it before Draw() will improve the user</span><br><span class="line">experience.</span><br><span class="line">Draw() helps you draw the buffer to console.</span><br><span class="line">ResetBuffer() fills the buffer with spaces.</span><br></pre></td></tr></table></figure>
<h3 id="2-2-Auto-Play-Mode">2.2 Auto Play Mode</h3>
<p>During the game, players may enter auto-play mode in any state. After entering into auto-play<br>
mode, you need to do two things.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Restore to the beginning state (simple idea: use a stack to log the player&apos;s commands and</span><br><span class="line">undo these commands when entering auto-play mode).</span><br><span class="line">Auto-play the game from the beginning state.</span><br></pre></td></tr></table></figure>
<h3 id="2-3-Output-format">2.3 Output format</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For the sake of simplicity, the disk is represented by *.</span><br><span class="line">The number of * that you should draw is calculated by 2* disk_size + 1. For</span><br><span class="line">example, if there are five disks in rod1, then the number of * is 3, 5, 7, 9, 11. The</span><br><span class="line">middle * is vertical aligned with the rod.</span><br><span class="line">You should draw disks from the bottom of the rod. The two examples below show the</span><br><span class="line">canvas when there are 5, 3 disks at the beginning.</span><br><span class="line">The position of the rods should remain unchanged regardless of number of disks.</span><br><span class="line">We have defined CANVAS_WIDTH and CANVAS_HEIGHT for you, you should not change</span><br><span class="line">the value.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upon wining the game (either from normal mode or auto-play mode), first print</span><br><span class="line">&quot;Congratulations! You win!&quot;, and then start a new round of game.</span><br><span class="line">std::cout &lt;&lt; &quot;Congratulations! You win!&quot; &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; &quot;How many disks do you want? (1 ~ 5)&quot; &lt;&lt; std::endl;</span><br><span class="line">About other output formats, please see the example below.</span><br></pre></td></tr></table></figure>
<h2 id="3-Example">3 Example</h2>
<h3 id="3-1-Initial-Phase">3.1 Initial Phase</h3>
<h3 id="3-2-Normal-Mode">3.2 Normal Mode</h3>
<p>As we can see, when we input 1 3 for the first time, the top disk of Rod 1 is popped and pushed<br>
to Rod 3.</p>
<p>Then we give an ilegal command 1 3 (since it violate the rule: No larger disk may be placed on</p>
<p>top of a smaller disk.), it will be ignored, so the previous canvas is printed.</p>
<h3 id="3-3-Auto-Play-Mode">3.3 Auto Play Mode</h3>
<p>Then we tried the auto-play mode by giving the command 0 0. As we can see, the program</p>
<p>executes automatically from the begining state until the player wins.</p>
<h2 id="4-Submission">4 Submission</h2>
<p>Compress your source code into a 7z file, and rename it to lab3-{your studentid}.7z</p>
<p>Upload it to canvas.</p>
<p>Feel free to ask teaching assistants if you have any questions.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">How many disks do you want? (1 ~ 5)</span><br><span class="line">Q // quit the game now</span><br></pre></td></tr></table></figure>
<h3 id="solution">solution</h3>
<h4 id="hanoitower-h">hanoitower.h</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;termio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myStack.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hanoitower</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	Stack&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;step;</span><br><span class="line">	hanoitower(){}</span><br><span class="line">	~hanoitower(){};</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">write_hi</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">	    <span class="keyword">int</span> width=Termio::CANVAS_WIDTH;</span><br><span class="line">	    <span class="comment">//buttom</span></span><br><span class="line">	    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= width; ++i)</span><br><span class="line">	    {</span><br><span class="line">	        <span class="comment">/* code */</span></span><br><span class="line">	         Termio::buffer[<span class="number">10</span>][i] =<span class="string">&apos;-&apos;</span>;</span><br><span class="line">	    }</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=width;i+=<span class="number">15</span>)</span><br><span class="line">	    {</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;Termio::CANVAS_HEIGHT;j+=<span class="number">2</span>)</span><br><span class="line">	             {Termio::buffer[j][i] =<span class="string">&apos;|&apos;</span>;}</span><br><span class="line">	          </span><br><span class="line">	    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	    <span class="comment">//plate</span></span><br><span class="line">	    <span class="keyword">int</span> j=<span class="number">11</span>;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">int</span> i=num;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	    {</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">5</span>-i<span class="number">-1</span>;k&lt;=<span class="number">5</span>+i+<span class="number">1</span>;k++)</span><br><span class="line">				Termio::buffer[j][k]=<span class="string">&apos;*&apos;</span>;</span><br><span class="line">			j-=<span class="number">2</span>;</span><br><span class="line">	    }	</span><br><span class="line">	    Termio::Draw();</span><br><span class="line"></span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span><span class="comment">//&#x6D4B;&#x7ED8;&#x64CD;&#x4F5C;</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">while</span>(!step.empty())</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;a=step.top();</span><br><span class="line">			step.pop();</span><br><span class="line">			move(a.first,a.second);</span><br><span class="line">			Termio::Draw();</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="comment">//Termio::Clear();</span></span><br><span class="line">		Termio::ResetBuffer();</span><br><span class="line">		step.clean();</span><br><span class="line">		<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;How many disks do you want? (1 ~ 5)&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">	    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">	    <span class="keyword">return</span> num;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span><span class="comment">//check if ilegal command</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">int</span> begin=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**a**/</span></span><br><span class="line">		<span class="keyword">while</span>(Termio::buffer[begin][<span class="number">5</span>+(a<span class="number">-1</span>)*<span class="number">15</span>]!=<span class="string">&apos;*&apos;</span>)begin+=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> sizea=<span class="number">-1</span>,start=<span class="number">5</span>+(a<span class="number">-1</span>)*<span class="number">15</span>;</span><br><span class="line">		<span class="keyword">while</span>(Termio::buffer[begin][start]==<span class="string">&apos;*&apos;</span>){sizea++;start--;}</span><br><span class="line"></span><br><span class="line">		<span class="comment">/**b**/</span></span><br><span class="line">		begin=<span class="number">9</span>;</span><br><span class="line">		<span class="keyword">while</span>(Termio::buffer[begin][<span class="number">5</span>+(b<span class="number">-1</span>)*<span class="number">15</span>]!=<span class="string">&apos; &apos;</span>){begin-=<span class="number">2</span>;}</span><br><span class="line">		begin+=<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">int</span> sizeb=<span class="number">-1</span>;</span><br><span class="line">		start=<span class="number">5</span>+(b<span class="number">-1</span>)*<span class="number">15</span>;</span><br><span class="line">		<span class="keyword">while</span>(Termio::buffer[begin][start]==<span class="string">&apos;*&apos;</span>){sizeb++;start--;}</span><br><span class="line"></span><br><span class="line">		<span class="comment">//cout&lt;&lt;&quot;sizea&quot;&lt;&lt;sizea&lt;&lt;&quot; &quot;&lt;&lt;&quot;sizeb&quot;&lt;&lt;sizeb&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">if</span>(sizeb&lt;sizea&amp;&amp;sizeb!=<span class="number">-1</span>)flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">check_finish</span><span class="params">()</span><span class="comment">//&#x662F;&#x5426;&#x6210;&#x529F;</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">bool</span> flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">int</span> len=<span class="number">0</span>,begin=<span class="number">9</span>;</span><br><span class="line">		<span class="keyword">while</span>(Termio::buffer[begin][<span class="number">5</span>+<span class="number">15</span>]!=<span class="string">&apos; &apos;</span>&amp;&amp;begin&gt;=<span class="number">0</span>){begin-=<span class="number">2</span>;len++;}</span><br><span class="line">		<span class="keyword">if</span>(len==num)</span><br><span class="line">			flag=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> flag;</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		<span class="keyword">if</span>(check(a,b))</span><br><span class="line">		{</span><br><span class="line">			<span class="keyword">int</span> begin=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">			<span class="comment">/**a**/</span></span><br><span class="line">			<span class="keyword">while</span>(Termio::buffer[begin][<span class="number">5</span>+(a<span class="number">-1</span>)*<span class="number">15</span>]!=<span class="string">&apos;*&apos;</span>)begin+=<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">int</span> size=<span class="number">-1</span>,start=<span class="number">5</span>+(a<span class="number">-1</span>)*<span class="number">15</span>;</span><br><span class="line">			<span class="keyword">while</span>(Termio::buffer[begin][start]==<span class="string">&apos;*&apos;</span>){Termio::buffer[begin][start]=<span class="string">&apos; &apos;</span>;size++;start--;}</span><br><span class="line">			start=<span class="number">5</span>+(a<span class="number">-1</span>)*<span class="number">15</span>+<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++){Termio::buffer[begin][start]=<span class="string">&apos; &apos;</span>;start++;}</span><br><span class="line"></span><br><span class="line">			<span class="comment">/**b**/</span></span><br><span class="line">			begin=<span class="number">9</span>;</span><br><span class="line">			<span class="keyword">while</span>(Termio::buffer[begin][<span class="number">5</span>+(b<span class="number">-1</span>)*<span class="number">15</span>]!=<span class="string">&apos; &apos;</span>){begin-=<span class="number">2</span>;}</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>+(b<span class="number">-1</span>)*<span class="number">15</span>-size;i&lt;=<span class="number">5</span>+(b<span class="number">-1</span>)*<span class="number">15</span>+size;++i){Termio::buffer[begin][i]=<span class="string">&apos;*&apos;</span>;}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>{</span><br><span class="line">		 <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Move a disk. Format: x y&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">		 <span class="keyword">int</span> x,y;</span><br><span class="line">		 <span class="built_in">std</span>::<span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		 <span class="keyword">if</span>(x==<span class="number">0</span>&amp;&amp;y==<span class="number">0</span>)</span><br><span class="line">		 	{autohanoi();<span class="keyword">return</span>;}</span><br><span class="line">		 <span class="keyword">else</span></span><br><span class="line">		 {</span><br><span class="line">		 	<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; a={y,x};</span><br><span class="line">		 	step.push(a);</span><br><span class="line">		 	move(x,y);</span><br><span class="line">		 	Termio::Draw();</span><br><span class="line">		 	<span class="keyword">if</span>(!check_finish())</span><br><span class="line">		 		operation();</span><br><span class="line">		 	<span class="keyword">else</span></span><br><span class="line">		 		<span class="keyword">return</span> ;</span><br><span class="line">		 }</span><br><span class="line">	}</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">autohanoi</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">	</span>{                                                                                                                                                         </span><br><span class="line">		undo();</span><br><span class="line">	    Stack&lt;hanoiunrec&gt; s;    </span><br><span class="line">	    s.push(hanoiunrec(num, <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>));     </span><br><span class="line">	    <span class="keyword">while</span> (!s.empty())         </span><br><span class="line">	    {  </span><br><span class="line">	        hanoiunrec q = s.top();    </span><br><span class="line">	        s.pop();                </span><br><span class="line">	       	<span class="keyword">int</span> n = q._n;           </span><br><span class="line">	        <span class="keyword">int</span> x = q._x;  </span><br><span class="line">	        <span class="keyword">int</span> y = q._y;  </span><br><span class="line">	        <span class="keyword">int</span> z = q._z;  </span><br><span class="line">	        <span class="keyword">if</span> (n == <span class="number">1</span>)             </span><br><span class="line">	        {  </span><br><span class="line">	            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Auto moving &quot;</span> &lt;&lt; q._x &lt;&lt; <span class="string">&quot;-&gt;&quot;</span> &lt;&lt; q._z &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">	            move(q._x,q._z);</span><br><span class="line">	            Termio::Draw();</span><br><span class="line">	        }  </span><br><span class="line">	        <span class="keyword">else</span>  </span><br><span class="line">	        {  </span><br><span class="line">	            s.push(hanoiunrec(n - <span class="number">1</span>, y, x, z));      </span><br><span class="line">	            s.push(hanoiunrec(<span class="number">1</span>, x, y, z));  </span><br><span class="line">	            s.push(hanoiunrec(n - <span class="number">1</span>, x, z, y));  </span><br><span class="line">	        }  </span><br><span class="line">	    }   </span><br><span class="line">	}</span><br><span class="line"></span><br><span class="line">};</span><br></pre></td></tr></table></figure>
<h4 id="myStack">myStack</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hanoiunrec.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Stack</span>{</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">     <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> {</span></span><br><span class="line">       T item;</span><br><span class="line">      Node* next;</span><br><span class="line">     };</span><br><span class="line">     Node *first;</span><br><span class="line">     <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     Stack() {count = <span class="number">0</span>;}</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T n)</span> </span>{</span><br><span class="line">      count++;</span><br><span class="line">      Node *oldfirst = first;</span><br><span class="line">      first = <span class="keyword">new</span> Node();</span><br><span class="line">      first-&gt;item = n;</span><br><span class="line">      first-&gt;next = oldfirst;</span><br><span class="line">     }</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">if</span> (empty()) <span class="keyword">return</span>;</span><br><span class="line">      count--;</span><br><span class="line">      first = first-&gt;next;</span><br><span class="line">     }</span><br><span class="line">     <span class="function">T <span class="title">top</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> first-&gt;item;</span><br><span class="line">     }</span><br><span class="line">     <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> !count;</span><br><span class="line">     }</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>{</span><br><span class="line">      <span class="keyword">return</span> count;</span><br><span class="line">     }</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span></span></span><br><span class="line"><span class="function">     </span>{</span><br><span class="line">       <span class="keyword">while</span>(!empty())</span><br><span class="line">        pop();</span><br><span class="line">     }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="hanoiunrec">hanoiunrec</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hanoiunrec</span></span></span><br><span class="line"><span class="class"> {</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">	 hanoiunrec() {};</span><br><span class="line">    hanoiunrec(<span class="keyword">int</span> n, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c):_n(n), _x(a), _y(b), _z(c){}          <span class="comment">//&#x6784;&#x9020;&#x51FD;&#x6570; </span></span><br><span class="line">    <span class="keyword">int</span> _n;         </span><br><span class="line">    <span class="keyword">int</span> _x, _y, _z;     </span><br><span class="line"> 	</span><br><span class="line"> };   <span class="comment">//&#x7ED3;&#x6784;&#x4F53;&#xFF0C;&#x8868;&#x793A;&#x6C49;&#x8BFA;&#x5854;&#x7684;&#x4FE1;&#x606F;</span></span><br></pre></td></tr></table></figure>
<h4 id="termio">termio</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">/* some code from Libconio 1.0 (C) 2004 FSL A.C. */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clrscr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ESC 033 <span class="comment">/* Escape char */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">termios</span> <span class="title">t</span>;</span></span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line">    tcgetattr(<span class="number">0</span>, &amp;t);</span><br><span class="line">    t.c_lflag &amp;= ~ECHO + ~ICANON;</span><br><span class="line">    tcsetattr(<span class="number">0</span>, TCSANOW, &amp;t);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    c = getchar();</span><br><span class="line">    t.c_lflag |= ICANON + ECHO;</span><br><span class="line">    tcsetattr(<span class="number">0</span>, TCSANOW, &amp;t);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clrscr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c[2J&quot;</span>, ESC);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c[%d;%dH&quot;</span>, ESC, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Termio</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// donot change the width and height</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CANVAS_WIDTH = <span class="number">41</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> CANVAS_HEIGHT = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buffer[CANVAS_HEIGHT][CANVAS_WIDTH + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">char</span> <span class="title">GetChar</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> getch();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Clear</span><span class="params">()</span> </span>{</span><br><span class="line">        clrscr();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Draw</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CANVAS_HEIGHT; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;CANVAS_WIDTH;j++)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; buffer[i][j] ;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ResetBuffer</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; CANVAS_HEIGHT; i++)</span><br><span class="line">            <span class="built_in">memset</span>(buffer[i], <span class="string">&apos; &apos;</span>, CANVAS_WIDTH);</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="hanoi">hanoi</h4>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;termio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;myStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hanoitower.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do not delete the following line</span></span><br><span class="line"><span class="keyword">char</span> Termio::buffer[Termio::CANVAS_HEIGHT][Termio::CANVAS_WIDTH + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>{</span><br><span class="line">    hanoitower h;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> n=h.init();</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        h.write_hi();</span><br><span class="line">        h.operation();</span><br><span class="line">         <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Congratulations! You win!&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>外接</category>
      </categories>
  </entry>
  <entry>
    <title>洛谷-P1216-number triangles</title>
    <url>/2020/10/26/%E6%B4%9B%E8%B0%B7-P1216-number-triangles/</url>
    <content><![CDATA[<h2 id="description">description</h2>
<p>&#x89C2;&#x5BDF;&#x4E0B;&#x9762;&#x7684;&#x6570;&#x5B57;&#x91D1;&#x5B57;&#x5854;&#x3002;</p>
<p>&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x6765;&#x67E5;&#x627E;&#x4ECE;&#x6700;&#x9AD8;&#x70B9;&#x5230;&#x5E95;&#x90E8;&#x4EFB;&#x610F;&#x5904;&#x7ED3;&#x675F;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4F7F;&#x8DEF;&#x5F84;&#x7ECF;&#x8FC7;&#x6570;&#x5B57;&#x7684;&#x548C;&#x6700;&#x5927;&#x3002;&#x6BCF;&#x4E00;&#x6B65;&#x53EF;&#x4EE5;&#x8D70;&#x5230;&#x5DE6;&#x4E0B;&#x65B9;&#x7684;&#x70B9;&#x4E5F;&#x53EF;&#x4EE5;&#x5230;&#x8FBE;&#x53F3;&#x4E0B;&#x65B9;&#x7684;&#x70B9;&#x3002;</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">        <span class="number">7</span> </span><br><span class="line">      <span class="number">3</span>   <span class="number">8</span> </span><br><span class="line">    <span class="number">8</span>   <span class="number">1</span>   <span class="number">0</span> </span><br><span class="line">  <span class="number">2</span>   <span class="number">7</span>   <span class="number">4</span>   <span class="number">4</span> </span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>   <span class="number">2</span>   <span class="number">6</span>   <span class="number">5</span> </span><br></pre></td></tr></table></figure>
<p>&#x5728;&#x4E0A;&#x9762;&#x7684;&#x6837;&#x4F8B;&#x4E2D;,&#x4ECE; 7&#x2192;3&#x2192;8&#x2192;7&#x2192;5 &#x7684;&#x8DEF;&#x5F84;&#x4EA7;&#x751F;&#x4E86;&#x6700;&#x5927;</p>
<h2 id="input">input</h2>
<p>&#x7B2C;&#x4E00;&#x4E2A;&#x884C;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570; <em>r</em> ,&#x8868;&#x793A;&#x884C;&#x7684;&#x6570;&#x76EE;&#x3002;</p>
<p>&#x540E;&#x9762;&#x6BCF;&#x884C;&#x4E3A;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x91D1;&#x5B57;&#x5854;&#x7279;&#x5B9A;&#x884C;&#x5305;&#x542B;&#x7684;&#x6574;&#x6570;&#x3002;</p>
<h2 id="output">output</h2>
<p>&#x5355;&#x72EC;&#x7684;&#x4E00;&#x884C;,&#x5305;&#x542B;&#x90A3;&#x4E2A;&#x53EF;&#x80FD;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x7684;&#x548C;&#x3002;</p>
<h2 id="example">example</h2>
<p><strong>&#x8F93;&#x5165; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5 </span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure>
<h2 id="hint">hint</h2>
<p>&#x3010;&#x6570;&#x636E;&#x8303;&#x56F4;&#x3011;<br>
&#x5BF9;&#x4E8E;100% &#x7684;&#x6570;&#x636E;&#xFF0C;1&#x2264;<em>r</em>&#x2264;1000&#xFF0C;&#x6240;&#x6709;&#x8F93;&#x5165;&#x5728; [0,100][0,100] &#x8303;&#x56F4;&#x5185;&#x3002;</p>
<p>&#x9898;&#x76EE;&#x7FFB;&#x8BD1;&#x6765;&#x81EA;NOCOW&#x3002;</p>
<p>USACO Training Section 1.5</p>
<p>IOI1994 Day1T1</p>
<h2 id="solution">solution</h2>
<p><code>&#x7B80;&#x5355;dp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;++j)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>){<span class="built_in">cout</span>&lt;&lt;maze[<span class="number">0</span>][<span class="number">0</span>];<span class="keyword">return</span> <span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">			maze[i][j]+=max(maze[i+<span class="number">1</span>][j],maze[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;maze[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/10/26/%E6%B4%9B%E8%B0%B7-P1216-Number%20Triangles/</url>
    <content><![CDATA[<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#x6D1B;&#x8C37;-P1216-Number</span> <span class="string">Triangles</span></span><br><span class="line"><span class="attr">tag:</span> <span class="string">dp</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">&#x6D1B;&#x8C37;</span></span><br></pre></td></tr></table></figure>
<h2 id="description">description</h2>
<p>&#x89C2;&#x5BDF;&#x4E0B;&#x9762;&#x7684;&#x6570;&#x5B57;&#x91D1;&#x5B57;&#x5854;&#x3002;</p>
<p>&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x6765;&#x67E5;&#x627E;&#x4ECE;&#x6700;&#x9AD8;&#x70B9;&#x5230;&#x5E95;&#x90E8;&#x4EFB;&#x610F;&#x5904;&#x7ED3;&#x675F;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4F7F;&#x8DEF;&#x5F84;&#x7ECF;&#x8FC7;&#x6570;&#x5B57;&#x7684;&#x548C;&#x6700;&#x5927;&#x3002;&#x6BCF;&#x4E00;&#x6B65;&#x53EF;&#x4EE5;&#x8D70;&#x5230;&#x5DE6;&#x4E0B;&#x65B9;&#x7684;&#x70B9;&#x4E5F;&#x53EF;&#x4EE5;&#x5230;&#x8FBE;&#x53F3;&#x4E0B;&#x65B9;&#x7684;&#x70B9;&#x3002;</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">        <span class="number">7</span> </span><br><span class="line">      <span class="number">3</span>   <span class="number">8</span> </span><br><span class="line">    <span class="number">8</span>   <span class="number">1</span>   <span class="number">0</span> </span><br><span class="line">  <span class="number">2</span>   <span class="number">7</span>   <span class="number">4</span>   <span class="number">4</span> </span><br><span class="line"><span class="number">4</span>   <span class="number">5</span>   <span class="number">2</span>   <span class="number">6</span>   <span class="number">5</span> </span><br></pre></td></tr></table></figure>
<p>&#x5728;&#x4E0A;&#x9762;&#x7684;&#x6837;&#x4F8B;&#x4E2D;,&#x4ECE; 7&#x2192;3&#x2192;8&#x2192;7&#x2192;5 &#x7684;&#x8DEF;&#x5F84;&#x4EA7;&#x751F;&#x4E86;&#x6700;&#x5927;</p>
<h2 id="input">input</h2>
<p>&#x7B2C;&#x4E00;&#x4E2A;&#x884C;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570; <em>r</em> ,&#x8868;&#x793A;&#x884C;&#x7684;&#x6570;&#x76EE;&#x3002;</p>
<p>&#x540E;&#x9762;&#x6BCF;&#x884C;&#x4E3A;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x91D1;&#x5B57;&#x5854;&#x7279;&#x5B9A;&#x884C;&#x5305;&#x542B;&#x7684;&#x6574;&#x6570;&#x3002;</p>
<h2 id="output">output</h2>
<p>&#x5355;&#x72EC;&#x7684;&#x4E00;&#x884C;,&#x5305;&#x542B;&#x90A3;&#x4E2A;&#x53EF;&#x80FD;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x7684;&#x548C;&#x3002;</p>
<h2 id="example">example</h2>
<p><strong>&#x8F93;&#x5165; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">7</span><br><span class="line">3 8</span><br><span class="line">8 1 0</span><br><span class="line">2 7 4 4</span><br><span class="line">4 5 2 6 5 </span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure>
<h2 id="hint">hint</h2>
<p>&#x3010;&#x6570;&#x636E;&#x8303;&#x56F4;&#x3011;<br>
&#x5BF9;&#x4E8E;100% &#x7684;&#x6570;&#x636E;&#xFF0C;1&#x2264;<em>r</em>&#x2264;1000&#xFF0C;&#x6240;&#x6709;&#x8F93;&#x5165;&#x5728; [0,100][0,100] &#x8303;&#x56F4;&#x5185;&#x3002;</p>
<p>&#x9898;&#x76EE;&#x7FFB;&#x8BD1;&#x6765;&#x81EA;NOCOW&#x3002;</p>
<p>USACO Training Section 1.5</p>
<p>IOI1994 Day1T1</p>
<h2 id="solution">solution</h2>
<p><code>&#x7B80;&#x5355;dp</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;++j)</span><br><span class="line">		{</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	<span class="keyword">if</span>(n==<span class="number">1</span>){<span class="built_in">cout</span>&lt;&lt;maze[<span class="number">0</span>][<span class="number">0</span>];<span class="keyword">return</span> <span class="number">0</span>;}</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">			maze[i][j]+=max(maze[i+<span class="number">1</span>][j],maze[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;maze[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>洛谷 P1434 滑雪</title>
    <url>/2020/10/25/%E6%B4%9B%E8%B0%B7-P1434-%E6%BB%91%E9%9B%AA/</url>
    <content><![CDATA[<h2 id="description">description</h2>
<p>Michael &#x559C;&#x6B22;&#x6ED1;&#x96EA;&#x3002;&#x8FD9;&#x5E76;&#x4E0D;&#x5947;&#x602A;&#xFF0C;&#x56E0;&#x4E3A;&#x6ED1;&#x96EA;&#x7684;&#x786E;&#x5F88;&#x523A;&#x6FC0;&#x3002;&#x53EF;&#x662F;&#x4E3A;&#x4E86;&#x83B7;&#x5F97;&#x901F;&#x5EA6;&#xFF0C;&#x6ED1;&#x7684;&#x533A;&#x57DF;&#x5FC5;&#x987B;&#x5411;&#x4E0B;&#x503E;&#x659C;&#xFF0C;&#x800C;&#x4E14;&#x5F53;&#x4F60;&#x6ED1;&#x5230;&#x5761;&#x5E95;&#xFF0C;&#x4F60;&#x4E0D;&#x5F97;&#x4E0D;&#x518D;&#x6B21;&#x8D70;&#x4E0A;&#x5761;&#x6216;&#x8005;&#x7B49;&#x5F85;&#x5347;&#x964D;&#x673A;&#x6765;&#x8F7D;&#x4F60;&#x3002;Michael &#x60F3;&#x77E5;&#x9053;&#x5728;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#x4E2D;&#x6700;&#x957F;&#x7684;&#x6ED1;&#x5761;&#x3002;&#x533A;&#x57DF;&#x7531;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7ED9;&#x51FA;&#x3002;&#x6570;&#x7EC4;&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x4EE3;&#x8868;&#x70B9;&#x7684;&#x9AD8;&#x5EA6;&#x3002;&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   2   3   4   5</span><br><span class="line">16  17  18  19  6</span><br><span class="line">15  24  25  20  7</span><br><span class="line">14  23  22  21  8</span><br><span class="line">13  12  11  10  9</span><br></pre></td></tr></table></figure>
<p>&#x4E00;&#x4E2A;&#x4EBA;&#x53EF;&#x4EE5;&#x4ECE;&#x67D0;&#x4E2A;&#x70B9;&#x6ED1;&#x5411;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x76F8;&#x90BB;&#x56DB;&#x4E2A;&#x70B9;&#x4E4B;&#x4E00;&#xFF0C;&#x5F53;&#x4E14;&#x4EC5;&#x5F53;&#x9AD8;&#x5EA6;&#x4F1A;&#x51CF;&#x5C0F;&#x3002;&#x5728;&#x4E0A;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#x4E2D;&#xFF0C;&#x4E00;&#x6761;&#x53EF;&#x884C;&#x7684;&#x6ED1;&#x5761;&#x4E3A; 24&#xFF0D;17&#xFF0D;16&#xFF0D;11&#xFF08;&#x4ECE; 2424 &#x5F00;&#x59CB;&#xFF0C;&#x5728; 11 &#x7ED3;&#x675F;&#xFF09;&#x3002;&#x5F53;&#x7136; 25&#xFF0D;24&#xFF0D;23&#xFF0D;&#x2026;&#xFF0D;3&#xFF0D;2&#xFF0D;1 &#x66F4;&#x957F;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x662F;&#x6700;&#x957F;&#x7684;&#x4E00;&#x6761;&#x3002;</p>
<a id="more"></a>
<h2 id="input">input</h2>
<p>&#x8F93;&#x5165;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x4E3A;&#x8868;&#x793A;&#x533A;&#x57DF;&#x7684;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x884C;&#x6570; R<em>R</em> &#x548C;&#x5217;&#x6570; C<em>C</em>&#x3002;&#x4E0B;&#x9762;&#x662F; R<em>R</em> &#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709; C<em>C</em> &#x4E2A;&#x6570;&#xFF0C;&#x4EE3;&#x8868;&#x9AD8;&#x5EA6;(&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7528; 11 &#x4E2A;&#x7A7A;&#x683C;&#x95F4;&#x9694;)&#x3002;</p>
<h2 id="output">output</h2>
<p>&#x8F93;&#x51FA;&#x533A;&#x57DF;&#x4E2D;&#x6700;&#x957F;&#x6ED1;&#x5761;&#x7684;&#x957F;&#x5EA6;&#x3002;</p>
<h2 id="example">example</h2>
<p><strong>&#x8F93;&#x5165; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 2 3 4 5</span><br><span class="line">16 17 18 19 6</span><br><span class="line">15 24 25 20 7</span><br><span class="line">14 23 22 21 8</span><br><span class="line">13 12 11 10 9</span><br></pre></td></tr></table></figure>
<p><strong>&#x8F93;&#x51FA; #1</strong>&#x590D;&#x5236;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">25</span><br></pre></td></tr></table></figure>
<h2 id="hint">hint</h2>
<p>&#x5BF9;&#x4E8E; 100% &#x7684;&#x6570;&#x636E;&#xFF0C;1&lt;= R,<em>C</em>&#x2264;100&#x3002;</p>
<h2 id="solution">solution</h2>
<p>&#x8BB0;&#x5FC6;&#x5316;&#x641C;&#x7D22; dfs &#x91CD;&#x70B9;<code>return</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> maze[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n,m,z;</span><br><span class="line"><span class="keyword">int</span> arr1[<span class="number">4</span>]={<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>},arr2[<span class="number">4</span>]={<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check2</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">int</span> x=maze[i][j];</span><br><span class="line">	<span class="keyword">if</span>((i<span class="number">-1</span>)&gt;=<span class="number">0</span>&amp;&amp;maze[i<span class="number">-1</span>][j]&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>((i+<span class="number">1</span>)&lt;n&amp;&amp;maze[i+<span class="number">1</span>][j]&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>((j+<span class="number">1</span>)&lt;m&amp;&amp;maze[i][j+<span class="number">1</span>]&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>((j<span class="number">-1</span>)&gt;=<span class="number">0</span>&amp;&amp;maze[i][j<span class="number">-1</span>]&lt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">			dp[i][j]=check2(i,j);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;dp[i][j]&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>(dp[i][j]!=<span class="number">0</span>)<span class="keyword">return</span> dp[i][j];</span><br><span class="line">	<span class="keyword">int</span> ma=<span class="number">0</span>,q=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;++k)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">int</span> y=arr1[k],x=arr2[k];<span class="comment">//cout&lt;&lt;i+y&lt;&lt;&quot;d &quot;&lt;&lt;j+x&lt;&lt;endl;</span></span><br><span class="line">		<span class="keyword">if</span>(i+y&gt;=<span class="number">0</span>&amp;&amp;i+y&lt;n&amp;&amp;j+x&gt;=<span class="number">0</span>&amp;&amp;j+x&lt;m)</span><br><span class="line">		{</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(maze[i+y][j+x]&lt;maze[i][j])</span><br><span class="line">			{</span><br><span class="line">				<span class="comment">//cout&lt;&lt;i+y&lt;&lt;&quot;d &quot;&lt;&lt;j+x&lt;&lt;&quot; &quot;&lt;&lt;dp[i+y][j+x]&lt;&lt;endl;</span></span><br><span class="line">				<span class="comment">//cout&lt;&lt;&quot;SSSS&quot;&lt;&lt;endl;</span></span><br><span class="line">				<span class="keyword">if</span>(dp[i+y][j+x]==<span class="number">0</span>)</span><br><span class="line">					q=dfs(i+y,j+x)+<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					q=dp[i+y][j+x]+<span class="number">1</span>;</span><br><span class="line">				<span class="comment">//cout&lt;&lt;q&lt;&lt;&quot;q&quot;&lt;&lt;endl;</span></span><br><span class="line">				ma=max(q,ma);</span><br><span class="line">			}</span><br><span class="line">		}</span><br><span class="line">	}</span><br><span class="line">	dp[i][j]=ma;</span><br><span class="line">	<span class="keyword">return</span> dp[i][j];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;maze[i][j];</span><br><span class="line">	init();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">	{</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;++j)</span><br><span class="line">		{</span><br><span class="line">			z=max(z,dfs(i,j));</span><br><span class="line">		}</span><br><span class="line">		</span><br><span class="line">	}<span class="built_in">cout</span>&lt;&lt;z&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>好题</tag>
        <tag>记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在pc端合并俩张照片</title>
    <url>/2020/10/23/%E5%A6%82%E4%BD%95%E5%9C%A8pc%E7%AB%AF%E5%90%88%E5%B9%B6%E4%BF%A9%E5%BC%A0%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>&#x5982;&#x4F55;&#x5728;pc&#x7AEF;&#x5408;&#x5E76;&#x4FE9;&#x5F20;&#x7167;&#x7247;?</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<p>1.&#x7528;<span class="label success">&#x201D;&#x753B;&#x56FE;&#x201C;</span>&#x8F6F;&#x4EF6;&#x6253;&#x5F00;&#x5176;&#x4E2D;&#x4E00;&#x5F20;&#x56FE;</p>
<p>2.&#x62C9;&#x51FA;&#x4E00;&#x7247;&#x7A7A;&#x767D;&#x533A;</p>
<p><img src="https://cdn.jsdelivr.net/gh/jun-yi-xiao/jun-yi-xiao.github.io/2020/10/23/%E5%A6%82%E4%BD%95%E5%9C%A8pc%E7%AB%AF%E5%90%88%E5%B9%B6%E4%BF%A9%E5%BC%A0%E7%85%A7%E7%89%87/1.png" alt="https://cdn.jsdelivr.net/gh/jun-yi-xiao/jun-yi-xiao.github.io/2020/10/23/%E5%A6%82%E4%BD%95%E5%9C%A8pc%E7%AB%AF%E5%90%88%E5%B9%B6%E4%BF%A9%E5%BC%A0%E7%85%A7%E7%89%87/1.png"></p>
<p>3.&#x70B9;&#x51FB; &#x7C98;&#x8D34;&#x2013;&gt;&#x7C98;&#x8D34;&#x6765;&#x6E90;&#x2013;&gt;&#x9009;&#x62E9;&#x7B2C;&#x4E8C;&#x5F20;&#x56FE;&#x7247;&#x2013;&gt;&#x8C03;&#x6574;&#x4F4D;&#x7F6E;</p>
<p><img src="https://cdn.jsdelivr.net/gh/jun-yi-xiao/jun-yi-xiao.github.io/2020/10/23/%E5%A6%82%E4%BD%95%E5%9C%A8pc%E7%AB%AF%E5%90%88%E5%B9%B6%E4%BF%A9%E5%BC%A0%E7%85%A7%E7%89%87/2.png" alt="2"></p>
<p>4.&#x4FDD;&#x5B58;</p>
]]></content>
      <categories>
        <category>pc-tips</category>
      </categories>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo next structure</title>
    <url>/2020/10/20/hexo-next-structure/</url>
    <content><![CDATA[<div class="note info">
            <p>structure of code</p>
          </div>
<a id="more"></a>
<p>hexo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">&#x251C;&#x2500;&#x2500; .deploy          #&#x90E8;&#x7F72;&#x6587;&#x4EF6;&#x5939;</span><br><span class="line">&#x251C;&#x2500;&#x2500; public           #html&#x6E90;&#x7801;&#xFF0C;hexo g&#x751F;&#x6210;</span><br><span class="line">&#x251C;&#x2500;&#x2500; scaffolds        #&#x6A21;&#x677F;</span><br><span class="line">&#x251C;&#x2500;&#x2500; scripts          #&#x6269;&#x5C55;&#x811A;&#x672C;</span><br><span class="line">&#x251C;&#x2500;&#x2500; source           #&#x6587;&#x7AE0;&#x6E90;&#x7801;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _drafts      #&#x8349;&#x7A3F;</span><br><span class="line">|   &#x2514;&#x2500;&#x2500; _posts       #&#x6587;&#x7AE0;</span><br><span class="line">&#x251C;&#x2500;&#x2500; themes           #&#x4E3B;&#x9898;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; next         #NexT&#x4E3B;&#x9898;</span><br><span class="line">&#x251C;&#x2500;&#x2500; _config.yml      #&#x535A;&#x5BA2;&#x914D;&#x7F6E;</span><br><span class="line">&#x2514;&#x2500;&#x2500; package.json     #&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x6570;&#x636E;</span><br></pre></td></tr></table></figure>
<p>next</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x251C;&#x2500;&#x2500; .github                #github&#x4FE1;&#x606F;</span><br><span class="line">&#x251C;&#x2500;&#x2500; languages              #&#x591A;&#x8BED;&#x8A00;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _en.yml            #&#x9ED8;&#x8BA4;&#x8BED;&#x8A00;</span><br><span class="line">|   &#x2514;&#x2500;&#x2500; zh-CN.yml          #&#x7B80;&#x4F53;&#x4E2D;&#x6587;</span><br><span class="line">|   &#x2514;&#x2500;&#x2500; zh-TW.yml          #&#x7E41;&#x4F53;&#x4E2D;&#x6587;</span><br><span class="line">&#x251C;&#x2500;&#x2500; layout                 #&#x5E03;&#x5C40;&#xFF0C;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x7684;*.swig&#x6587;&#x4EF6;&#x662F;&#x5BF9;&#x4E3B;&#x9875;&#xFF0C;&#x5206;&#x9875;&#xFF0C;&#x5B58;&#x6863;&#x7B49;&#x7684;&#x63A7;&#x5236;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _custom            #&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x6A21;&#x677F;&#xFF0C;&#x8986;&#x76D6;&#x539F;&#x6709;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; head.swig      #&#x6587;&#x9996;&#x6837;&#x5F0F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; header.swig    #&#x5934;&#x90E8;&#x6837;&#x5F0F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; sidebar.swig   #&#x4FA7;&#x8FB9;&#x680F;&#x6837;&#x5F0F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _macro             #&#x53EF;&#x4EE5;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#x6A21;&#x677F;&#xFF0C;&#x8986;&#x76D6;&#x539F;&#x6709;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; post.swig      #&#x6587;&#x7AE0;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; reward.swig    #&#x6253;&#x8D4F;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; sidebar.swig   #&#x4FA7;&#x8FB9;&#x680F;&#x6A21;&#x677F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _partial           #&#x5C40;&#x90E8;&#x7684;&#x5E03;&#x5C40;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; head           #&#x5934;&#x90E8;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; search         #&#x641C;&#x7D22;&#x6A21;&#x677F;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; share          #&#x5206;&#x4EAB;&#x6A21;&#x677F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _script            #&#x5C40;&#x90E8;&#x7684;&#x5E03;&#x5C40;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _third-party       #&#x7B2C;&#x4E09;&#x65B9;&#x6A21;&#x677F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; _layout.swig       #&#x4E3B;&#x9875;&#x9762;&#x6A21;&#x677F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; index.swig         #&#x4E3B;&#x9875;&#x9762;&#x6A21;&#x677F;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; page               #&#x9875;&#x9762;&#x6A21;&#x677F;</span><br><span class="line">|   &#x2514;&#x2500;&#x2500; tag.swig           #tag&#x6A21;&#x677F;</span><br><span class="line">&#x251C;&#x2500;&#x2500; scripts                #script&#x6E90;&#x7801;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; tags               #tags&#x7684;script&#x6E90;&#x7801;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; marge.js           #&#x9875;&#x9762;&#x6A21;&#x677F;</span><br><span class="line">&#x251C;&#x2500;&#x2500; source                 #&#x6E90;&#x7801;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; css                #css&#x6E90;&#x7801;</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; _common        #*.styl&#x57FA;&#x7840;css</span><br><span class="line">|   |   &#x251C;&#x2500;&#x2500; _custom        #*.styl&#x81EA;&#x5B9A;&#x4E49;&#x5C40;&#x90E8;css</span><br><span class="line">|   |   &#x2514;&#x2500;&#x2500; _mixins        #mixins&#x7684;css</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; fonts              #&#x5B57;&#x4F53;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; images             #&#x56FE;&#x7247;</span><br><span class="line">|   &#x251C;&#x2500;&#x2500; js                 #javascript&#x6E90;&#x4EE3;&#x7801;</span><br><span class="line">|   &#x2514;&#x2500;&#x2500; lib                #&#x5F15;&#x7528;&#x5E93;</span><br><span class="line">&#x251C;&#x2500;&#x2500; _config.yml            #&#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6;</span><br><span class="line">&#x2514;&#x2500;&#x2500; README.md              #&#x8BF4;&#x660E;&#x6587;&#x4EF6;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo tips</title>
    <url>/2020/10/20/hexo-tips/</url>
    <content><![CDATA[<div class="note info">
            <p>info some tips to use hexo next</p>
          </div>
<a id="more"></a>
<h3 id="categories">categories</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line">	-hexo	</span><br><span class="line">    -tips</span><br><span class="line">//&#x8868;&#x793A;&#x5728;hexo&#x5206;&#x7C7B;&#x4E2D;&#x7684;tips&#x7D2B;&#x5206;&#x7C7B;</span><br></pre></td></tr></table></figure>
<h2 id="update">update</h2>
<p>&#x66F4;&#x65B0;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x91CD;&#x542F;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x53EA;&#x9700;&#x5237;&#x65B0;&#x9875;&#x9762;&#x5373;&#x53EF;&#x9884;&#x89C8;&#x6548;&#x679C;</p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>tips</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>update blog</title>
    <url>/2020/10/19/update-log/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>&#x535A;&#x5BA2;&#x66F4;&#x65B0;&#x65E5;&#x5FD7;</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
<h1>encrypt blog</h1>
<p>install</p>
<p><code>npm install hexo-encrypt --save</code></p>
<p>config</p>
<p>&#x5728;&#x672B;&#x5C3E;&#x6DFB;&#x52A0;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encrypt: </span><br><span class="line">  enable: true</span><br><span class="line">  password: 123456</span><br></pre></td></tr></table></figure>
<span class="label success">updated by cozy 2020/10/18</span>
<h1>set width of content</h1>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">D:\blog\themes\next\source\_data\sytle</span><br><span class="line">.header{</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">72%</span>;</span><br><span class="line">    +tablet() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">    +mobile() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> {</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">72%</span>;</span><br><span class="line">    +tablet() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">    +mobile() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.content-wrap</span> {</span><br><span class="line">    <span class="attribute">width</span>: calc(<span class="number">100%</span> - <span class="number">260px</span>);</span><br><span class="line">    +tablet() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">    +mobile() {</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<span class="label success">updated by cozy 2020/10/19</span>
<h1>add  colorful tag bubble</h1>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd next/layout</span><br><span class="line">touch tag-bubble.swig</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> {</span></span><br><span class="line">    margin: 0 auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    width: 700px;</span><br><span class="line">    min-width: 100px;</span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.tagbubble</span> {</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin-top: 300px;</span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.tagbubble</span> <span class="selector-tag">a</span> {</span></span><br><span class="line">    display: block;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.b0</span>{</span></span><br><span class="line">      width: 95px;</span><br><span class="line">      height: 90px;</span><br><span class="line">      line-height: 90px;</span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.b1</span>{</span></span><br><span class="line">      width: 70px;</span><br><span class="line">      height: 70px;</span><br><span class="line">      line-height: 55px;</span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.b2</span>{</span></span><br><span class="line">      width: 60px;</span><br><span class="line">      height: 60px;</span><br><span class="line">      line-height: 60px;</span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.b3</span>{</span></span><br><span class="line">      width: 45px;</span><br><span class="line">      height: 45px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.c0</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%, <span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c1</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%, <span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c2</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%, <span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c3</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%, <span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c4</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%, <span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c5</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%, <span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"><span class="css">  <span class="selector-class">.c6</span>{</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%, <span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="comment">/* &#x79FB;&#x52A8;&#x7AEF;&#x6837;&#x5F0F; */</span></span></span><br><span class="line"><span class="css">  <span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>){</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> {</span></span><br><span class="line">        width: 10px;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">        min-width: 0px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.tagbubble</span>{</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        min-width: 0px;</span><br><span class="line">        margin-top: 200px;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.tagbubble</span> <span class="selector-tag">a</span> {</span></span><br><span class="line">      font-size: 13px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.b0</span>{</span></span><br><span class="line">        width: 65px;</span><br><span class="line">        height: 65px;</span><br><span class="line">        line-height: 60px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.b1</span>{</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        line-height: 45px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.b2</span>{</span></span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="selector-class">.b3</span>{</span></span><br><span class="line">        width: 35px;</span><br><span class="line">        height: 35px;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tagbubble&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> alltags = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&apos;tag-cloud-tags&apos;</span>);</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> tags = alltags[<span class="number">0</span>].getElementsByTagName(<span class="string">&apos;a&apos;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> bo = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> co = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++){</span></span><br><span class="line"><span class="javascript">        bo.push(<span class="string">&quot;b&quot;</span> + i);</span></span><br><span class="line">     }</span><br><span class="line"><span class="javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++){</span></span><br><span class="line"><span class="javascript">        co.push(<span class="string">&quot;c&quot;</span> + i);</span></span><br><span class="line">     }</span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> divDom = <span class="built_in">document</span>.querySelector(<span class="string">&apos;.tagbubble&apos;</span>)</span></span><br><span class="line"><span class="javascript">     <span class="comment">//var divDom = document.getElementsByClassName(&apos;tagbubble&apos;)[0];</span></span></span><br><span class="line"><span class="javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tags.length;i++){</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> atag = <span class="built_in">document</span>.createElement(<span class="string">&apos;a&apos;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boStyle = bo[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> coStyle = co[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">7</span>)];</span></span><br><span class="line">        if(tags[i].innerText.length &gt; 10){</span><br><span class="line"><span class="javascript">            boStyle = <span class="string">&quot;b0&quot;</span>;</span></span><br><span class="line"><span class="javascript">        }<span class="keyword">else</span> <span class="keyword">if</span>(tags[i].innerText.length &gt; <span class="number">5</span> &amp;&amp; tags[i].innerText.length &lt; <span class="number">10</span>){</span></span><br><span class="line"><span class="javascript">            boStyle = <span class="string">&quot;b1&quot;</span>;</span></span><br><span class="line">        }</span><br><span class="line"><span class="javascript">        atag.setAttribute(<span class="string">&quot;class&quot;</span>, boStyle+<span class="string">&quot; &quot;</span>+coStyle);</span></span><br><span class="line"><span class="javascript">        atag.setAttribute(<span class="string">&quot;href&quot;</span>, tags[i].href);</span></span><br><span class="line">        atag.innerText = tags[i].innerText;</span><br><span class="line">        divDom.appendChild(atag);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsIpad = sUserAgent.match(<span class="regexp">/ipad/i</span>) == <span class="string">&quot;ipad&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="regexp">/iphone os/i</span>) == <span class="string">&quot;iphone os&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsMidp = sUserAgent.match(<span class="regexp">/midp/i</span>) == <span class="string">&quot;midp&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsUc7 = sUserAgent.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">&quot;rv:1.2.3.4&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsUc = sUserAgent.match(<span class="regexp">/ucweb/i</span>) == <span class="string">&quot;ucweb&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsAndroid = sUserAgent.match(<span class="regexp">/android/i</span>) == <span class="string">&quot;android&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsCE = sUserAgent.match(<span class="regexp">/windows ce/i</span>) == <span class="string">&quot;windows ce&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsWM = sUserAgent.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">&quot;windows mobile&quot;</span>;</span></span><br><span class="line">        if (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) {</span><br><span class="line"><span class="javascript">            <span class="comment">//&#x79FB;&#x52A8;&#x7AEF;&#x9875;&#x9762;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="number">80</span>;</span></span><br><span class="line"><span class="javascript">        } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="javascript">            <span class="comment">//pc&#x7AEF;&#x9875;&#x9762;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="number">150</span>;</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> tagRadius = browserRedirect();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/*3D&#x6807;&#x7B7E;&#x4E91;*/</span></span></span><br><span class="line">    tagcloud({</span><br><span class="line"><span class="javascript">        selector: <span class="string">&quot;.tagbubble&quot;</span>,   <span class="comment">//&#x5143;&#x7D20;&#x9009;&#x62E9;&#x5668;</span></span></span><br><span class="line"><span class="javascript">        fontsize: <span class="number">14</span>,             <span class="comment">//&#x57FA;&#x672C;&#x5B57;&#x4F53;&#x5927;&#x5C0F;, &#x5355;&#x4F4D;px</span></span></span><br><span class="line"><span class="javascript">        radius: tagRadius,        <span class="comment">//&#x6EDA;&#x52A8;&#x534A;&#x5F84;, &#x5355;&#x4F4D;px &#x9875;&#x9762;&#x5BBD;&#x5EA6;&#x548C;&#x9AD8;&#x5EA6;&#x7684;&#x4E94;&#x5206;&#x4E4B;&#x4E00;</span></span></span><br><span class="line"><span class="javascript">        mspeed: <span class="string">&quot;slow&quot;</span>,           <span class="comment">//&#x6EDA;&#x52A8;&#x6700;&#x5927;&#x901F;&#x5EA6;, &#x53D6;&#x503C;: slow, normal(&#x9ED8;&#x8BA4;), fast</span></span></span><br><span class="line"><span class="javascript">        ispeed: <span class="string">&quot;slow&quot;</span>,           <span class="comment">//&#x6EDA;&#x52A8;&#x521D;&#x901F;&#x5EA6;, &#x53D6;&#x503C;: slow, normal(&#x9ED8;&#x8BA4;), fast</span></span></span><br><span class="line"><span class="javascript">        direction: <span class="number">135</span>,           <span class="comment">//&#x521D;&#x59CB;&#x6EDA;&#x52A8;&#x65B9;&#x5411;, &#x53D6;&#x503C;&#x89D2;&#x5EA6;(&#x987A;&#x65F6;&#x9488;360): 0&#x5BF9;&#x5E94;top, 90&#x5BF9;&#x5E94;left, 135&#x5BF9;&#x5E94;right-bottom(&#x9ED8;&#x8BA4;)...</span></span></span><br><span class="line"><span class="javascript">        keep: <span class="literal">false</span>               <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;&#x7EC4;&#x4EF6;&#x540E;&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x968F;&#x9F20;&#x6807;&#x6EDA;&#x52A8;, &#x53D6;&#x503C;: false, true(&#x9ED8;&#x8BA4;) &#x5BF9;&#x5E94; &#x51CF;&#x901F;&#x81F3;&#x521D;&#x901F;&#x5EA6;&#x6EDA;&#x52A8;, &#x968F;&#x9F20;&#x6807;&#x6EDA;&#x52A8;</span></span></span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd next/source/js</span><br><span class="line">touch bubble.js</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 3d&#x6807;&#x7B7E;&#x4E91;</span></span><br><span class="line"><span class="comment">* &#x529F;&#x80FD;&#xFF1A;&#x9F20;&#x6807;&#x79FB;&#x5165;&#x6807;&#x7B7E;&#xFF0C;&#x5F53;&#x524D;&#x6807;&#x7B7E;&#x9759;&#x6B62;&#x653E;&#x5927;</span></span><br><span class="line"><span class="comment">* &#x8BF4;&#x660E;&#xFF1A;</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="built_in">window</span>.tagcloud = (<span class="function"><span class="keyword">function</span>(<span class="params">win, doc</span>) </span>{ <span class="comment">// ns</span></span><br><span class="line">    <span class="comment">// &#x5224;&#x65AD;&#x5BF9;&#x8C61;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">obj</span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">&apos;[object Object]&apos;</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x6784;&#x9020;&#x51FD;&#x6570;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TagCloud</span> (<span class="params">options</span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        self.config = TagCloud._getConfig(options);</span><br><span class="line">        self.box = self.config.element;  <span class="comment">//&#x7EC4;&#x4EF6;&#x5143;&#x7D20;</span></span><br><span class="line">        self.fontsize = self.config.fontsize; <span class="comment">//&#x5E73;&#x5747;&#x5B57;&#x4F53;&#x5927;&#x5C0F;</span></span><br><span class="line">        self.radius = self.config.radius; <span class="comment">//&#x6EDA;&#x52A8;&#x534A;&#x5F84;</span></span><br><span class="line">        self.depth = <span class="number">2</span> * self.radius;   <span class="comment">//&#x6EDA;&#x52A8;&#x6DF1;&#x5EA6;</span></span><br><span class="line">        self.size = <span class="number">2</span> * self.radius;    <span class="comment">//&#x968F;&#x9F20;&#x6807;&#x6EDA;&#x52A8;&#x53D8;&#x901F;&#x4F5C;&#x7528;&#x533A;&#x57DF;</span></span><br><span class="line"></span><br><span class="line">        self.mspeed = TagCloud._getMsSpeed(self.config.mspeed);</span><br><span class="line">        self.ispeed = TagCloud._getIsSpeed(self.config.ispeed);</span><br><span class="line">        self.items = self._getItems();</span><br><span class="line"></span><br><span class="line">        self.direction = self.config.direction;   <span class="comment">//&#x521D;&#x59CB;&#x6EDA;&#x52A8;&#x65B9;&#x5411;</span></span><br><span class="line">        self.keep = self.config.keep; <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;&#x540E;&#x662F;&#x5426;&#x4FDD;&#x6301;&#x4E4B;&#x524D;&#x6EDA;&#x52A8;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">        self.active = <span class="literal">false</span>;   <span class="comment">//&#x662F;&#x5426;&#x4E3A;&#x6FC0;&#x6D3B;&#x72B6;&#x6001;</span></span><br><span class="line">        self.lasta = <span class="number">1</span>;</span><br><span class="line">        self.lastb = <span class="number">1</span>;</span><br><span class="line">        self.mouseX0 = self.ispeed * <span class="built_in">Math</span>.sin(self.direction * <span class="built_in">Math</span>.PI / <span class="number">180</span>);    <span class="comment">//&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;x&#x8F74;&#x521D;&#x59CB;&#x8DDD;&#x79BB;</span></span><br><span class="line">        self.mouseY0 = -self.ispeed * <span class="built_in">Math</span>.cos(self.direction * <span class="built_in">Math</span>.PI / <span class="number">180</span>);   <span class="comment">//&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;y&#x8F74;&#x521D;&#x59CB;&#x8DDD;&#x79BB;</span></span><br><span class="line">        self.mouseX = self.mouseX0;   <span class="comment">//&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;x&#x8F74;&#x8DDD;&#x79BB;</span></span><br><span class="line">        self.mouseY = self.mouseY0;   <span class="comment">//&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;y&#x8F74;&#x8DDD;&#x79BB;</span></span><br><span class="line">        self.index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x5165;</span></span><br><span class="line">        TagCloud._on(self.box, <span class="string">&apos;mouseover&apos;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            self.active = <span class="literal">true</span>;</span><br><span class="line">        });</span><br><span class="line">        <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;</span></span><br><span class="line">        TagCloud._on(self.box, <span class="string">&apos;mouseout&apos;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            self.active = <span class="literal">false</span>;</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#x9F20;&#x6807;&#x5728;&#x5185;&#x79FB;&#x52A8;</span></span><br><span class="line">        TagCloud._on(self.keep ? win : self.box, <span class="string">&apos;mousemove&apos;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> oEvent = win.event || ev;</span><br><span class="line">            <span class="keyword">var</span> boxPosition = self.box.getBoundingClientRect();</span><br><span class="line">            self.mouseX = (oEvent.clientX - (boxPosition.left + self.box.offsetWidth / <span class="number">2</span>)) / <span class="number">5</span>;</span><br><span class="line">            self.mouseY = (oEvent.clientY - (boxPosition.top + self.box.offsetHeight / <span class="number">2</span>)) / <span class="number">5</span>;</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = self.items.length; j &lt; len; j++) {</span><br><span class="line">            self.items[j].element.index=j;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;&#x5B50;&#x5143;&#x7D20;,&#x5F53;&#x524D;&#x5143;&#x7D20;&#x9759;&#x6B62;&#x653E;&#x5927;</span></span><br><span class="line">            self.items[j].element.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                self.index = <span class="built_in">this</span>.index;</span><br><span class="line">            };</span><br><span class="line"></span><br><span class="line">            <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;&#x5B50;&#x5143;&#x7D20;,&#x5F53;&#x524D;&#x5143;&#x7D20;&#x7EE7;&#x7EED;&#x6EDA;&#x52A8;</span></span><br><span class="line">            self.items[j].element.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">                self.index = <span class="number">-1</span>;</span><br><span class="line">            };</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#x5B9A;&#x65F6;&#x66F4;&#x65B0;</span></span><br><span class="line">        TagCloud.boxs.push(self.box);</span><br><span class="line">        self.update(self);    <span class="comment">//&#x521D;&#x59CB;&#x66F4;&#x65B0;</span></span><br><span class="line">        self.box.style.visibility = <span class="string">&quot;visible&quot;</span>;</span><br><span class="line">        self.box.style.position = <span class="string">&quot;relative&quot;</span>;</span><br><span class="line">        <span class="comment">// self.box.style.minHeight = 1.2 * self.size + &quot;px&quot;;</span></span><br><span class="line">        <span class="comment">// self.box.style.minWidth = 2.5 * self.size + &quot;px&quot;;</span></span><br><span class="line">        self.box.style.minHeight = <span class="number">0</span> * self.size + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        self.box.style.minWidth = <span class="number">0</span> * self.size + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = self.items.length; j &lt; len; j++) {</span><br><span class="line">            self.items[j].element.style.position = <span class="string">&quot;absolute&quot;</span>;</span><br><span class="line">            self.items[j].element.style.zIndex = j + <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        self.up = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            self.update(self);</span><br><span class="line">        }, <span class="number">10</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#x5B9E;&#x4F8B;</span></span><br><span class="line">    TagCloud.boxs = []; <span class="comment">//&#x5B9E;&#x4F8B;&#x5143;&#x7D20;&#x6570;&#x7EC4;</span></span><br><span class="line">    <span class="comment">// &#x9759;&#x6001;&#x65B9;&#x6CD5;&#x4EEC;</span></span><br><span class="line">    TagCloud._set = <span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (TagCloud.boxs.indexOf(element) == <span class="number">-1</span>) {<span class="comment">//ie8&#x4E0D;&#x652F;&#x6301;&#x6570;&#x7EC4;&#x7684;indexOf&#x65B9;&#x6CD5;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#x6DFB;&#x52A0;&#x6570;&#x7EC4;IndexOf&#x65B9;&#x6CD5;</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.indexOf){</span><br><span class="line">        <span class="built_in">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span>(<span class="params">elt <span class="regexp">/*, from*/</span></span>)</span>{</span><br><span class="line">            <span class="keyword">var</span> len = <span class="built_in">this</span>.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">from</span> = <span class="built_in">Number</span>(<span class="built_in">arguments</span>[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">from</span> = (<span class="keyword">from</span> &lt; <span class="number">0</span>)</span><br><span class="line">                ? <span class="built_in">Math</span>.ceil(<span class="keyword">from</span>)</span><br><span class="line">                : <span class="built_in">Math</span>.floor(<span class="keyword">from</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">from</span> &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">from</span> += len;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; <span class="keyword">from</span> &lt; len; <span class="keyword">from</span>++){</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">from</span> <span class="keyword">in</span> <span class="built_in">this</span> &amp;&amp; <span class="built_in">this</span>[<span class="keyword">from</span>] === elt)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">from</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    TagCloud._getConfig = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> defaultConfig = {   <span class="comment">//&#x9ED8;&#x8BA4;&#x503C;</span></span><br><span class="line">            fontsize: <span class="number">16</span>,       <span class="comment">//&#x57FA;&#x672C;&#x5B57;&#x4F53;&#x5927;&#x5C0F;, &#x5355;&#x4F4D;px</span></span><br><span class="line">            radius: <span class="number">60</span>,         <span class="comment">//&#x6EDA;&#x52A8;&#x534A;&#x5F84;, &#x5355;&#x4F4D;px</span></span><br><span class="line">            mspeed: <span class="string">&quot;normal&quot;</span>,   <span class="comment">//&#x6EDA;&#x52A8;&#x6700;&#x5927;&#x901F;&#x5EA6;, &#x53D6;&#x503C;: slow, normal(&#x9ED8;&#x8BA4;), fast</span></span><br><span class="line">            ispeed: <span class="string">&quot;normal&quot;</span>,   <span class="comment">//&#x6EDA;&#x52A8;&#x521D;&#x901F;&#x5EA6;, &#x53D6;&#x503C;: slow, normal(&#x9ED8;&#x8BA4;), fast</span></span><br><span class="line">            direction: <span class="number">135</span>,     <span class="comment">//&#x521D;&#x59CB;&#x6EDA;&#x52A8;&#x65B9;&#x5411;, &#x53D6;&#x503C;&#x89D2;&#x5EA6;(&#x987A;&#x65F6;&#x9488;360): 0&#x5BF9;&#x5E94;top, 90&#x5BF9;&#x5E94;left, 135&#x5BF9;&#x5E94;right-bottom(&#x9ED8;&#x8BA4;)...</span></span><br><span class="line">            keep: <span class="literal">true</span>          <span class="comment">//&#x9F20;&#x6807;&#x79FB;&#x51FA;&#x7EC4;&#x4EF6;&#x540E;&#x662F;&#x5426;&#x7EE7;&#x7EED;&#x968F;&#x9F20;&#x6807;&#x6EDA;&#x52A8;, &#x53D6;&#x503C;: false, true(&#x9ED8;&#x8BA4;) &#x5BF9;&#x5E94; &#x51CF;&#x901F;&#x81F3;&#x521D;&#x901F;&#x5EA6;&#x6EDA;&#x52A8;, &#x968F;&#x9F20;&#x6807;&#x6EDA;&#x52A8;</span></span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isObject(config)) {</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> config) {</span><br><span class="line">                <span class="keyword">if</span>(config.hasOwnProperty(i)) {<span class="comment">//hasOwnProperty()&#x7528;&#x6765;&#x5224;&#x65AD;&#x4E00;&#x4E2A;&#x5C5E;&#x6027;&#x662F;&#x5B9A;&#x4E49;&#x5728;&#x5BF9;&#x8C61;&#x672C;&#x8EAB;&#x800C;&#x4E0D;&#x662F;&#x7EE7;&#x627F;&#x81EA;&#x539F;&#x578B;&#x94FE;</span></span><br><span class="line">                    defaultConfig[i] = config[i]; <span class="comment">//&#x7528;&#x6237;&#x914D;&#x7F6E;</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultConfig;<span class="comment">// &#x914D;&#x7F6E; Merge</span></span><br><span class="line">    };</span><br><span class="line">    TagCloud._getMsSpeed = <span class="function"><span class="keyword">function</span> (<span class="params">mspeed</span>) </span>{    <span class="comment">//&#x6EDA;&#x52A8;&#x6700;&#x5927;&#x901F;&#x5EA6;</span></span><br><span class="line">        <span class="keyword">var</span> speedMap = {</span><br><span class="line">            slow: <span class="number">1.5</span>, </span><br><span class="line">            normal: <span class="number">3</span>,</span><br><span class="line">            fast: <span class="number">5</span></span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> speedMap[mspeed] || <span class="number">3</span>;</span><br><span class="line">    };</span><br><span class="line">    TagCloud._getIsSpeed = <span class="function"><span class="keyword">function</span> (<span class="params">ispeed</span>) </span>{    <span class="comment">//&#x6EDA;&#x52A8;&#x521D;&#x901F;&#x5EA6;</span></span><br><span class="line">        <span class="keyword">var</span> speedMap = {</span><br><span class="line">            slow: <span class="number">10</span>,</span><br><span class="line">            normal: <span class="number">25</span>,</span><br><span class="line">            fast: <span class="number">50</span></span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">return</span> speedMap[ispeed] || <span class="number">25</span>;</span><br><span class="line">    };</span><br><span class="line">    TagCloud._getSc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">        <span class="keyword">var</span> l = <span class="built_in">Math</span>.PI / <span class="number">180</span>;</span><br><span class="line">        <span class="comment">//&#x6570;&#x7EC4;&#x987A;&#x5E8F;0,1,2,3&#x8868;&#x793A;asin,acos,bsin,bcos</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="built_in">Math</span>.sin(a * l),</span><br><span class="line">            <span class="built_in">Math</span>.cos(a * l),</span><br><span class="line">            <span class="built_in">Math</span>.sin(b * l),</span><br><span class="line">            <span class="built_in">Math</span>.cos(b * l)</span><br><span class="line">        ];</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    TagCloud._on = <span class="function"><span class="keyword">function</span> (<span class="params">ele, eve, handler, cap</span>) </span>{</span><br><span class="line">        <span class="keyword">if</span> (ele.addEventListener) {</span><br><span class="line">            ele.addEventListener(eve, handler, cap);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (ele.attachEvent) {</span><br><span class="line">            ele.attachEvent(<span class="string">&apos;on&apos;</span> + eve, handler);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            ele[<span class="string">&apos;on&apos;</span> + eve] = handler;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x539F;&#x578B;&#x65B9;&#x6CD5;</span></span><br><span class="line">    TagCloud.prototype = {</span><br><span class="line">        <span class="keyword">constructor</span>: TagCloud, // &#x53CD;&#x5411;&#x5F15;&#x7528;&#x6784;&#x9020;&#x5668;</span><br><span class="line"></span><br><span class="line">        update: function () {</span><br><span class="line">            <span class="keyword">var</span> self = <span class="built_in">this</span>, a, b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!self.active &amp;&amp; !self.keep) {</span><br><span class="line">                self.mouseX = <span class="built_in">Math</span>.abs(self.mouseX - self.mouseX0) &lt; <span class="number">1</span> ? self.mouseX0 : (self.mouseX + self.mouseX0) / <span class="number">2</span>;   <span class="comment">//&#x91CD;&#x7F6E;&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;x&#x8F74;&#x8DDD;&#x79BB;</span></span><br><span class="line">                self.mouseY = <span class="built_in">Math</span>.abs(self.mouseY - self.mouseY0) &lt; <span class="number">1</span> ? self.mouseY0 : (self.mouseY + self.mouseY0) / <span class="number">2</span>;   <span class="comment">//&#x91CD;&#x7F6E;&#x9F20;&#x6807;&#x4E0E;&#x6EDA;&#x52A8;&#x5706;&#x5FC3;y&#x8F74;&#x8DDD;&#x79BB;</span></span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            a = -(<span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(-self.mouseY, -self.size), self.size) / self.radius ) * self.mspeed;</span><br><span class="line">            b = (<span class="built_in">Math</span>.min(<span class="built_in">Math</span>.max(-self.mouseX, -self.size), self.size) / self.radius ) * self.mspeed;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(a) &lt;= <span class="number">0.01</span> &amp;&amp; <span class="built_in">Math</span>.abs(b) &lt;= <span class="number">0.01</span>) { <span class="keyword">return</span>; }</span><br><span class="line"></span><br><span class="line">            self.lasta = a;</span><br><span class="line">            self.lastb = b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sc = TagCloud._getSc(a, b);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = self.items.length; j &lt; len; j++) {</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> rx1 = self.items[j].x,</span><br><span class="line">                    ry1 = self.items[j].y*sc[<span class="number">1</span>] + self.items[j].z*(-sc[<span class="number">0</span>]),</span><br><span class="line">                    rz1 = self.items[j].y*sc[<span class="number">0</span>] + self.items[j].z*sc[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> rx2 = rx1 * sc[<span class="number">3</span>] + rz1 * sc[<span class="number">2</span>],</span><br><span class="line">                    ry2 = ry1,</span><br><span class="line">                    rz2 = rz1 * sc[<span class="number">3</span>] - rx1 * sc[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(self.index==j){</span><br><span class="line"></span><br><span class="line">                    self.items[j].scale = <span class="number">1</span>; <span class="comment">//&#x53D6;&#x503C;&#x8303;&#x56F4;0.6 ~ 3</span></span><br><span class="line">                    self.items[j].fontsize = <span class="number">16</span>;</span><br><span class="line">                    self.items[j].alpha = <span class="number">1</span>;</span><br><span class="line">                    self.items[j].element.style.zIndex = <span class="number">99</span>;</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">var</span> per = self.depth / (self.depth + rz2);</span><br><span class="line">                    self.items[j].x = rx2;</span><br><span class="line">                    self.items[j].y = ry2;</span><br><span class="line">                    self.items[j].z = rz2;</span><br><span class="line"></span><br><span class="line">                    self.items[j].scale = per; <span class="comment">//&#x53D6;&#x503C;&#x8303;&#x56F4;0.6 ~ 3</span></span><br><span class="line">                    self.items[j].fontsize = <span class="built_in">Math</span>.ceil(per * <span class="number">2</span>) + self.fontsize - <span class="number">6</span>;</span><br><span class="line">                    self.items[j].alpha = <span class="number">1.5</span> * per - <span class="number">0.5</span>;</span><br><span class="line">                    self.items[j].element.style.zIndex = <span class="built_in">Math</span>.ceil(per*<span class="number">10</span><span class="number">-5</span>);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//self.items[j].element.style.fontSize = self.items[j].fontsize + &quot;px&quot;;//&#x5B57;&#x4F53;&#x53D8;&#x5927;&#x5C0F;</span></span><br><span class="line">                self.items[j].element.style.left = self.items[j].x + (self.box.offsetWidth - self.items[j].offsetWidth) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                self.items[j].element.style.top = self.items[j].y + (self.box.offsetHeight - self.items[j].offsetHeight) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                self.items[j].element.style.filter = <span class="string">&quot;alpha(opacity=&quot;</span> + <span class="number">100</span> * self.items[j].alpha + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">                self.items[j].element.style.opacity = self.items[j].alpha;</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        _getItems: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">                items = [],</span><br><span class="line">                element = self.box.children, <span class="comment">// children &#x5168;&#x90E8;&#x662F;Element</span></span><br><span class="line">                length = element.length,</span><br><span class="line">                item;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) {</span><br><span class="line">                item = {};</span><br><span class="line">                item.angle = {};</span><br><span class="line">                item.angle.phi = <span class="built_in">Math</span>.acos(<span class="number">-1</span> + (<span class="number">2</span> * i + <span class="number">1</span>) / length);</span><br><span class="line">                item.angle.theta = <span class="built_in">Math</span>.sqrt((length + <span class="number">1</span>) * <span class="built_in">Math</span>.PI) * item.angle.phi;</span><br><span class="line">                item.element = element[i];</span><br><span class="line">                item.offsetWidth = item.element.offsetWidth;</span><br><span class="line">                item.offsetHeight = item.element.offsetHeight;</span><br><span class="line">                item.x = self.radius * <span class="number">1.5</span> * <span class="built_in">Math</span>.cos(item.angle.theta) * <span class="built_in">Math</span>.sin(item.angle.phi);</span><br><span class="line">                item.y = self.radius * <span class="number">1.5</span> * <span class="built_in">Math</span>.sin(item.angle.theta) * <span class="built_in">Math</span>.sin(item.angle.phi);</span><br><span class="line">                item.z = self.radius * <span class="number">1.5</span> * <span class="built_in">Math</span>.cos(item.angle.phi);</span><br><span class="line">                item.element.style.left = item.x + (self.box.offsetWidth - item.offsetWidth) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                item.element.style.top = item.y + (self.box.offsetHeight - item.offsetHeight) / <span class="number">2</span> + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">                items.push(item);</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> items;   <span class="comment">//&#x5355;&#x5143;&#x7D20;&#x6570;&#x7EC4;</span></span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!doc.querySelectorAll) {<span class="comment">//ie7&#x4E0D;&#x652F;&#x6301;querySelectorAll&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;</span></span><br><span class="line">        doc.querySelectorAll = <span class="function"><span class="keyword">function</span> (<span class="params">selectors</span>) </span>{</span><br><span class="line">            <span class="keyword">var</span> style = doc.createElement(<span class="string">&apos;style&apos;</span>), elements = [], element;</span><br><span class="line">            doc.documentElement.firstChild.appendChild(style);</span><br><span class="line">            doc._qsa = [];</span><br><span class="line"></span><br><span class="line">            style.styleSheet.cssText = selectors + <span class="string">&apos;{x-qsa:expression(document._qsa &amp;&amp; document._qsa.push(this))}&apos;</span>;</span><br><span class="line">            <span class="built_in">window</span>.scrollBy(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            style.parentNode.removeChild(style);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (doc._qsa.length) {</span><br><span class="line">                element = doc._qsa.shift();</span><br><span class="line">                element.style.removeAttribute(<span class="string">&apos;x-qsa&apos;</span>);</span><br><span class="line">                elements.push(element);</span><br><span class="line">            }</span><br><span class="line">            doc._qsa = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">return</span> elements;</span><br><span class="line">        };</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>{ <span class="comment">// factory</span></span><br><span class="line">        options = options || {}; <span class="comment">// &#x77ED;&#x8DEF;&#x8BED;&#x6CD5;</span></span><br><span class="line">        <span class="keyword">var</span> selector = options.selector || <span class="string">&apos;.tagcloud&apos;</span>, <span class="comment">//&#x9ED8;&#x8BA4;&#x9009;&#x62E9;class&#x4E3A;tagcloud&#x7684;&#x5143;&#x7D20;</span></span><br><span class="line">            elements = doc.querySelectorAll(selector),</span><br><span class="line">            instance = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>, len = elements.length; index &lt; len; index++) {</span><br><span class="line">            options.element = elements[index];</span><br><span class="line">            <span class="keyword">if</span> (!!TagCloud._set(options.element)) {</span><br><span class="line">                instance.push(<span class="keyword">new</span> TagCloud(options));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">})(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>
<p>&#x5728;next/layout/_layout.swig&#x4E2D;&#x5F15;&#x5165;bubble.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/clicklove.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;{{ config.language }}&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">+  <span class="comment">&lt;!--&#x7403;&#x578B;&#x6C14;&#x6CE1;&#x6807;&#x7B7E;&#x4E91; --&gt;</span></span><br><span class="line">+  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/bubble.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>vim next/layout/page.swig</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">+{% include <span class="string">&apos;tag-bubble.swig&apos;</span> %}</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">{#####################}</span><br><span class="line">{### END PAGE BODY ###}</span><br><span class="line">{#####################}</span><br></pre></td></tr></table></figure>
<span class="label success">updated by cozy 2020/10/19</span>
<h1>Code block folding</h1>
<h1>messageboard</h1>
<p>&#x6CE8;&#x518C;leancloud&#x8D26;&#x53F7;</p>
<p>&#x521B;&#x5EFA;&#x5F00;&#x53D1;&#x677F;&#x5E94;&#x7528;</p>
<p>&#x5C06;<code>&#x5E94;&#x7528;keys</code>&#x7684;&#x6570;&#x636E;&#x6DFB;&#x52A0;&#x5230;&#x4E3B;&#x9898;config&#x4E2D;&#x53BB;</p>
<p><img src="/2020/10/19/update-log/update-log/leancloud.png" alt="&#x5E94;&#x7528;keys"></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
<h1>typing effect</h1>
<p><a href="https://tding.top/archives/58cff12b.html">https://tding.top/archives/58cff12b.html</a></p>
<h1>hiding blog</h1>
<p>yaml<code>notshow: true</code></p>
<span class="label success">updated by cozy 2020/10/22</span>
<h1>update dynamic bg</h1>
<p>&#x5728;&#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x4E2D;<code>canvas_nest</code>&#x6539;&#x6210;<code>false</code></p>
<h1>To be updated</h1>
<ul>
<li>&#x6587;&#x7AE0;&#x76EE;&#x5F55;&#x70B9;&#x51FB;&#x6CA1;&#x53CD;&#x5E94;</li>
<li>&#x5B57;&#x4F53;&#x8C03;&#x6574;</li>
<li>&#x8D85;&#x94FE;&#x63A5;&#x989C;&#x8272;</li>
<li>&#x8BFB;&#x8005;&#x81EA;&#x5DF1;&#x9009;&#x62E9;&#x80CC;&#x666F;&#x989C;&#x8272;</li>
<li><s>&#x9996;&#x9875;&#x9690;&#x85CF;&#x6307;&#x5B9A;&#x6587;&#x7AE0;</s></li>
<li>&#x9996;&#x9875;&#x7F6E;&#x9876;&#x6587;&#x7AE0;</li>
<li><s>&#x7559;&#x8A00;&#x677F;</s></li>
</ul>
<h1>reference</h1>
<p><a href="https://www.liaofuzhan.com/posts/4158923031.html">tag bubble</a></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>log</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test password</title>
    <url>/2020/10/19/test-password/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">Hey, password is required here.</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9c9d5e21425accc510d734582475e776d2b0ba8b87a59a73099f92835e28ba7d">80bd98c5e49e01cb8fe91d9a4539dd9b</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>why I choose master</title>
    <url>/2020/10/19/why-I-choose-master/</url>
    <content><![CDATA[<p>&#x4E3A;&#x4EC0;&#x4E48;&#x6211;&#x9009;&#x62E9;&#x8BFB;&#x7855;&#x58EB;&#x800C;&#x4E0D;&#x662F;<s>&#x76F4;&#x535A;</s>&#xFF1F;&#x5927;&#x6982;&#x662F;&#x5927;&#x4E09;&#x4E0A;&#x5B66;&#x671F;&#x7684;&#x65F6;&#x5019;&#x6211;&#x5C31;&#x5F00;&#x59CB;&#x601D;&#x8003;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x5728;&#x4FDD;&#x7814;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E5F;&#x4E00;&#x76F4;&#x6000;&#x7591;&#x81EA;&#x5DF1;&#x7684;&#x9009;&#x62E9;&#x3002;&#x4E0B;&#x9762;&#x5C31;&#x8BF4;&#x8BF4;&#x6211;&#x7684;&#x4E2A;&#x4EBA;&#x770B;&#x6CD5;&#x3002;</p>
<a id="more"></a>
<p>&#x200B;	  &#x6211;&#x5927;&#x4E00;&#x9009;&#x62E9;&#x8FC7;&#x4E00;&#x6B21;&#x8F6C;&#x4E13;&#x4E1A;&#xFF0C;&#x6765;&#x5230;&#x4E86;&#x4E92;&#x8054;&#x7F51;&#x8FD9;&#x4E2A;&#x7CBE;&#x5F69;&#x3001;&#x5145;&#x6EE1;&#x8BF1;&#x60D1;&#x529B;&#x7684;&#x5730;&#x65B9;&#x3002;&#x8BDA;&#x7136;&#xFF0C;&#x6211;&#x627E;&#x5230;&#x4E86;&#x5FEB;&#x4E50;&#x8001;&#x5BB6;&#xFF0C;&#x5F88;&#x5E86;&#x5E78;&#x81EA;&#x5DF1;&#x6CA1;&#x6709;&#x53BB;&#x91D1;&#x878D;&#x6570;&#x5B66;&#x5565;&#x7684;&#x3002;&#x53EF;&#x662F;&#x5728;&#x540E;&#x6765;&#x7684;&#x5927;&#x5B66;&#x751F;&#x6D3B;&#x4E2D;&#xFF0C;&#x6211;&#x6E10;&#x6E10;&#x5730;&#x4E86;&#x89E3;&#x5230;&#x4E86;&#x5F88;&#x591A;&#xFF0C;&#x793E;&#x4EA4;&#xFF0C;&#x91D1;&#x878D;&#x7B49;&#x65B9;&#x9762;&#x3002;&#x6211;&#x5F88;&#x60F3;&#x53BB;&#x5B66;&#x4E60;&#x5176;&#x4ED6;&#x4E1C;&#x897F;&#xFF0C;&#x4E5F;&#x8BB8;&#x6211;&#x66F4;&#x613F;&#x610F;&#x6269;&#x5C55;&#x81EA;&#x5DF1;&#x77E5;&#x8BC6;&#x9762;&#x7684;&#x5E7F;&#x5EA6;&#x3002;<span class="label primary"> &#x56E0;&#x4E3A;&#x79BB;&#x5F00;&#x5728;&#x6821;&#x56ED;&#x8FD9;&#x4E2A;&#x8C61;&#x7259;&#x5854;&#xFF0C;&#x6211;&#x9700;&#x8981;&#x5E94;&#x5BF9;&#x5404;&#x79CD;&#x7EB7;&#x81F3;&#x6C93;&#x6765;&#x7684;&#x6311;&#x6218;&#xFF0C;&#x6240;&#x4EE5;&#x60F3;&#x8BA9;&#x81EA;&#x5DF1;&#x7684;&#x6280;&#x80FD;&#x6811;&#x66F4;&#x5168;&#x9762;&#x4E00;&#x4E9B;&#x3002;</span></p>
<p>&#x200B;	&#x786E;&#x5B9E;&#xFF0C;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x4FDD;&#x7814;&#x8FC7;&#x7A0B;&#x4E2D;&#x7070;&#x98DE;&#x70DF;&#x706D;&#xFF0C;&#x76F4;&#x535A;&#x7684;&#x96BE;&#x5EA6;&#x6BD4;&#x8F83;&#x4F4E;&#x4E00;&#x70B9;&#x5F88;&#x662F;&#x8BA9;&#x6211;&#x5FC3;&#x52A8;&#xFF0C;&#x4E5F;&#x7533;&#x8BF7;&#x4E86;&#x6E2F;&#x6821;&#x7684;&#x63D0;&#x524D;&#x6279;&#xFF08;<s>&#x94B1;&#x5F88;&#x591A;&#xFF0C;&#x5BFC;&#x5E08;&#x5F88;&#x5389;&#x5BB3;&#xFF0C;&#x800C;&#x4E14;&#x6211;&#x7279;&#x522B;&#x559C;&#x6B22;&#x6D77;</s>&#xFF09;&#xFF0C;&#x53EF;&#x662F;&#x6211;&#x8981;&#x5199;&#x4E94;&#x5E74;&#x7684;&#x8BBA;&#x6587;&#xFF0C;&#x8981;&#x4E0D;&#x65AD;&#x5730;&#x653E;&#x5F03;&#x8EAB;&#x8FB9;&#x7684;&#x7CBE;&#x5F69;&#x53BB;focus on one thing&#xFF0C;&#x4E0D;&#x7B26;&#x5408;&#x6211;&#x7684;&#x521D;&#x5FC3;&#x3002;&#x8FD8;&#x6709;&#x4E2A;&#x539F;&#x56E0;&#x662F;&#xFF0C;&#x6211;&#x4E00;&#x76F4;&#x89C9;&#x5F97;&#x5B66;&#x751F;&#x662F;&#x5F31;&#x52BF;&#x7FA4;&#x4F53;&#xFF0C;&#x4E0D;&#x7BA1;&#x662F;graduate or undergraduate&#xFF0C;&#x6240;&#x4EE5;&#x60F3;&#x6362;&#x79CD;&#x8EAB;&#x4EFD;&#xFF0C;&#x6216;&#x8BB8;&#x53EF;&#x4EE5;&#x81EA;&#x7531;&#x4E00;&#x70B9;&#xFF1F;</p>
<p>&#x200B;	&#x6700;&#x540E;&#x662F;&#x6211;&#x5BF9;&#x79D1;&#x7814;&#xFF0C;&#x5BF9;&#x8BA1;&#x7B97;&#x673A;&#x7406;&#x89E3;&#x7684;&#x4E0D;&#x591F;&#x6DF1;&#x3002;&#x7855;&#x58EB;&#x6BD5;&#x4E1A;&#x540E;&#x5DE5;&#x4F5C;&#x4F1A;&#x52A0;&#x6DF1;&#x6211;&#x5BF9;&#x8BA1;&#x7B97;&#x673A;&#x8FD9;&#x4E2A;&#x884C;&#x4E1A;&#x7684;&#x7406;&#x89E3;&#xFF0C;&#x5982;&#x679C;&#x5DE5;&#x4F5C;&#x51E0;&#x5E74;&#x6211;&#x89C9;&#x5F97;_&#x55EF;&#xFF1F;&#x8C8C;&#x4F3C;&#x6211;&#x73B0;&#x5728;&#x5F88;&#x9002;&#x5408;&#x53BB;&#x5FF5;&#x4E2A;&#x535A;&#x58EB;&#x6B38;&#xFF1F;_&#xFF0C;&#x90A3;&#x6211;&#x4E5F;&#x6765;&#x5F97;&#x53CA;&#x53BB;&#x7533;&#x8BF7;&#x56FD;&#x5916;&#x7684;&#x535A;&#x58EB;&#x3002;</p>
<p>&#x200B;	&#x4EE5;&#x4E0A;&#x5C31;&#x662F;&#x6211;&#x5728;&#x9762;&#x5BF9;&#x7855;&#x58EB;&#x548C;&#x535A;&#x58EB;&#x9009;&#x62E9;&#x7684;&#x601D;&#x8003;&#x3002;&#xFF08;&#x4E0D;&#x4F1A;&#x8BF4;&#x662F;&#x4E3A;&#x4E86;&#x770B;&#x770B;tagcloud&#x7684;&#x6548;&#x679C;</p>
]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>faker的一天</title>
    <url>/2020/10/18/faker/</url>
    <content><![CDATA[<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>faker&#x4ECA;&#x5929;&#x548C;&#x5988;&#x5988;&#x53BB;&#x5403;&#x996D;&#x4E86;</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<a id="more"></a>
]]></content>
      <tags>
        <tag>faker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo neddddw <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
